
Embedded_OS_Lab1_P76091218.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004564  08004564  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800456c  0800456c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800456c  0800456c  0001456c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004570  08004570  00014570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e0c  20000010  08004584  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012e1c  08004584  00022e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e0d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002767  00000000  00000000  00030e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  000335b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00034410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021305  00000000  00000000  00035150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f863  00000000  00000000  00056455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceba4  00000000  00000000  00065cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013485c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b3c  00000000  00000000  001348b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004510 	.word	0x08004510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004510 	.word	0x08004510

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fac3 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f82f 	bl	8000534 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f88b 	bl	80005f0 <MX_GPIO_Init>
	//	  0,/* Priority at which the task is created. */
	//	  NULL
	//	  );
  //xQueue1 = xQueueCreate( 10, sizeof(int) );

    xQueue = xQueueCreate(10, sizeof(int));
 80004da:	2200      	movs	r2, #0
 80004dc:	2104      	movs	r1, #4
 80004de:	200a      	movs	r0, #10
 80004e0:	f001 fddc 	bl	800209c <xQueueGenericCreate>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <main+0x58>)
 80004e8:	6013      	str	r3, [r2, #0]
    
    BaseType_t xledtask = xTaskCreate(vLedHandler,
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <main+0x58>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2200      	movs	r2, #0
 80004f0:	9201      	str	r2, [sp, #4]
 80004f2:	2201      	movs	r2, #1
 80004f4:	9200      	str	r2, [sp, #0]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	490a      	ldr	r1, [pc, #40]	; (8000524 <main+0x5c>)
 80004fa:	480b      	ldr	r0, [pc, #44]	; (8000528 <main+0x60>)
 80004fc:	f002 fa12 	bl	8002924 <xTaskCreate>
 8000500:	6078      	str	r0, [r7, #4]
                                        128,
                                        xQueue, 
                                        1,
                                        NULL);

    BaseType_t xbuttontask = xTaskCreate(vButtonHandler,
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <main+0x58>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	9201      	str	r2, [sp, #4]
 800050a:	2201      	movs	r2, #1
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	4906      	ldr	r1, [pc, #24]	; (800052c <main+0x64>)
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <main+0x68>)
 8000514:	f002 fa06 	bl	8002924 <xTaskCreate>
 8000518:	6038      	str	r0, [r7, #0]
                                        "BUTTON", 
                                        128,
                                        xQueue, 
                                        1,
                                        NULL);
  vTaskStartScheduler();
 800051a:	f002 fb75 	bl	8002c08 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051e:	e7fe      	b.n	800051e <main+0x56>
 8000520:	20012d8c 	.word	0x20012d8c
 8000524:	08004528 	.word	0x08004528
 8000528:	08000695 	.word	0x08000695
 800052c:	0800452c 	.word	0x0800452c
 8000530:	08000815 	.word	0x08000815

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 ffdc 	bl	8004500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xb4>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xb4>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xb4>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <SystemClock_Config+0xb8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a1b      	ldr	r2, [pc, #108]	; (80005ec <SystemClock_Config+0xb8>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <SystemClock_Config+0xb8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059c:	2300      	movs	r3, #0
 800059e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fd49 	bl	800103c <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005b0:	f000 f970 	bl	8000894 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 ffac 	bl	800152c <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005da:	f000 f95b 	bl	8000894 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_GPIO_Init+0x98>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a1e      	ldr	r2, [pc, #120]	; (8000688 <MX_GPIO_Init+0x98>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_GPIO_Init+0x98>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <MX_GPIO_Init+0x98>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <MX_GPIO_Init+0x98>)
 800062c:	f043 0308 	orr.w	r3, r3, #8
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_GPIO_Init+0x98>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|red_LED_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000644:	4811      	ldr	r0, [pc, #68]	; (800068c <MX_GPIO_Init+0x9c>)
 8000646:	f000 fcdf 	bl	8001008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 800064a:	2301      	movs	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	4619      	mov	r1, r3
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <MX_GPIO_Init+0xa0>)
 800065e:	f000 fb1f 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|red_LED_Pin;
 8000662:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	4619      	mov	r1, r3
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_GPIO_Init+0x9c>)
 800067c:	f000 fb10 	bl	8000ca0 <HAL_GPIO_Init>

}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40020c00 	.word	0x40020c00
 8000690:	40020000 	.word	0x40020000

08000694 <vLedHandler>:

/* USER CODE BEGIN 4 */


void vLedHandler()
  {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	  int databuffer = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	603b      	str	r3, [r7, #0]
	  int mode = 0;//控制模式
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
   
    for( ;; ){ 
      //mode 0 green&red交替亮
      if(mode == 0){
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d171      	bne.n	800078c <vLedHandler+0xf8>
        HAL_GPIO_WritePin(Green_LED_GPIO_Port,GPIO_PIN_12,1);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ae:	4857      	ldr	r0, [pc, #348]	; (800080c <vLedHandler+0x178>)
 80006b0:	f000 fcaa 	bl	8001008 <HAL_GPIO_WritePin>
        if(xQueueReceive(xQueue,&databuffer,5000)){
 80006b4:	4b56      	ldr	r3, [pc, #344]	; (8000810 <vLedHandler+0x17c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4639      	mov	r1, r7
 80006ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fee2 	bl	8002488 <xQueueReceive>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00e      	beq.n	80006e8 <vLedHandler+0x54>
          //vTaskDelay(5000);
          mode = (mode+1)%2;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3301      	adds	r3, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	bfb8      	it	lt
 80006d6:	425b      	neglt	r3, r3
 80006d8:	607b      	str	r3, [r7, #4]
          HAL_GPIO_WritePin(Green_LED_GPIO_Port,GPIO_PIN_12,0);////////
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e0:	484a      	ldr	r0, [pc, #296]	; (800080c <vLedHandler+0x178>)
 80006e2:	f000 fc91 	bl	8001008 <HAL_GPIO_WritePin>
          continue;
 80006e6:	e08f      	b.n	8000808 <vLedHandler+0x174>
        }
        //vTaskDelay(5000);
        HAL_GPIO_WritePin(Green_LED_GPIO_Port,GPIO_PIN_12,0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ee:	4847      	ldr	r0, [pc, #284]	; (800080c <vLedHandler+0x178>)
 80006f0:	f000 fc8a 	bl	8001008 <HAL_GPIO_WritePin>
        if(xQueueReceive(xQueue,&databuffer,0)){
 80006f4:	4b46      	ldr	r3, [pc, #280]	; (8000810 <vLedHandler+0x17c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4639      	mov	r1, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fec3 	bl	8002488 <xQueueReceive>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d008      	beq.n	800071a <vLedHandler+0x86>
          //vTaskDelay(5000);
          mode = (mode+1)%2;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3301      	adds	r3, #1
 800070c:	2b00      	cmp	r3, #0
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	bfb8      	it	lt
 8000714:	425b      	neglt	r3, r3
 8000716:	607b      	str	r3, [r7, #4]
          continue;
 8000718:	e076      	b.n	8000808 <vLedHandler+0x174>
        }
        HAL_GPIO_WritePin(red_LED_GPIO_Port,GPIO_PIN_14,1);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000720:	483a      	ldr	r0, [pc, #232]	; (800080c <vLedHandler+0x178>)
 8000722:	f000 fc71 	bl	8001008 <HAL_GPIO_WritePin>
        if(xQueueReceive(xQueue,&databuffer,5000)){
 8000726:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <vLedHandler+0x17c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4639      	mov	r1, r7
 800072c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fea9 	bl	8002488 <xQueueReceive>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00e      	beq.n	800075a <vLedHandler+0xc6>
          //vTaskDelay(5000);
          mode = (mode+1)%2;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3301      	adds	r3, #1
 8000740:	2b00      	cmp	r3, #0
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	bfb8      	it	lt
 8000748:	425b      	neglt	r3, r3
 800074a:	607b      	str	r3, [r7, #4]
          HAL_GPIO_WritePin(red_LED_GPIO_Port,GPIO_PIN_14,0);/////////
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000752:	482e      	ldr	r0, [pc, #184]	; (800080c <vLedHandler+0x178>)
 8000754:	f000 fc58 	bl	8001008 <HAL_GPIO_WritePin>
          continue;
 8000758:	e056      	b.n	8000808 <vLedHandler+0x174>
        }
        HAL_GPIO_WritePin(red_LED_GPIO_Port,GPIO_PIN_14,0);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000760:	482a      	ldr	r0, [pc, #168]	; (800080c <vLedHandler+0x178>)
 8000762:	f000 fc51 	bl	8001008 <HAL_GPIO_WritePin>
        if(xQueueReceive(xQueue,&databuffer,0)){
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <vLedHandler+0x17c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4639      	mov	r1, r7
 800076c:	2200      	movs	r2, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fe8a 	bl	8002488 <xQueueReceive>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d093      	beq.n	80006a2 <vLedHandler+0xe>
          //vTaskDelay(5000);
          mode = (mode+1)%2;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3301      	adds	r3, #1
 800077e:	2b00      	cmp	r3, #0
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	bfb8      	it	lt
 8000786:	425b      	neglt	r3, r3
 8000788:	607b      	str	r3, [r7, #4]
          continue;
 800078a:	e03d      	b.n	8000808 <vLedHandler+0x174>
        }
      }
      //mode 1 green&red交替亮
      else if(mode == 1){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d187      	bne.n	80006a2 <vLedHandler+0xe>
        HAL_GPIO_WritePin(red_LED_GPIO_Port,GPIO_PIN_14,1);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000798:	481c      	ldr	r0, [pc, #112]	; (800080c <vLedHandler+0x178>)
 800079a:	f000 fc35 	bl	8001008 <HAL_GPIO_WritePin>
        if(xQueueReceive(xQueue,&databuffer,500)){
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <vLedHandler+0x17c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4639      	mov	r1, r7
 80007a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fe6d 	bl	8002488 <xQueueReceive>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00e      	beq.n	80007d2 <vLedHandler+0x13e>
          //vTaskDelay(1000);
          mode = (mode+1)%2;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3301      	adds	r3, #1
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	bfb8      	it	lt
 80007c0:	425b      	neglt	r3, r3
 80007c2:	607b      	str	r3, [r7, #4]
          HAL_GPIO_WritePin(red_LED_GPIO_Port,GPIO_PIN_14,0);/////////
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ca:	4810      	ldr	r0, [pc, #64]	; (800080c <vLedHandler+0x178>)
 80007cc:	f000 fc1c 	bl	8001008 <HAL_GPIO_WritePin>
          continue;
 80007d0:	e01a      	b.n	8000808 <vLedHandler+0x174>
        }
        HAL_GPIO_WritePin(red_LED_GPIO_Port,GPIO_PIN_14,0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <vLedHandler+0x178>)
 80007da:	f000 fc15 	bl	8001008 <HAL_GPIO_WritePin>
        if(xQueueReceive(xQueue,&databuffer,500)){
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <vLedHandler+0x17c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4639      	mov	r1, r7
 80007e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fe4d 	bl	8002488 <xQueueReceive>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	f43f af56 	beq.w	80006a2 <vLedHandler+0xe>
          //vTaskDelay(1000);
          mode = (mode+1)%2;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3301      	adds	r3, #1
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	bfb8      	it	lt
 8000802:	425b      	neglt	r3, r3
 8000804:	607b      	str	r3, [r7, #4]
          continue;
 8000806:	bf00      	nop
      if(mode == 0){
 8000808:	e74b      	b.n	80006a2 <vLedHandler+0xe>
 800080a:	bf00      	nop
 800080c:	40020c00 	.word	0x40020c00
 8000810:	20012d8c 	.word	0x20012d8c

08000814 <vButtonHandler>:
    }
  }



void vButtonHandler(){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	bool item = 1; //丟個標記讓queue知道要接收東西
 800081a:	2301      	movs	r3, #1
 800081c:	717b      	strb	r3, [r7, #5]
  GPIO_PinState now = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	71bb      	strb	r3, [r7, #6]
  GPIO_PinState pre = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	71fb      	strb	r3, [r7, #7]
	for( ;; )
	{
    now = HAL_GPIO_ReadPin(Blue_Button_GPIO_Port,GPIO_PIN_0);
 8000826:	2101      	movs	r1, #1
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <vButtonHandler+0x54>)
 800082a:	f000 fbd5 	bl	8000fd8 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	71bb      	strb	r3, [r7, #6]
    if(now != pre){
 8000832:	79ba      	ldrb	r2, [r7, #6]
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	429a      	cmp	r2, r3
 8000838:	d011      	beq.n	800085e <vButtonHandler+0x4a>
      if(now == 1){
 800083a:	79bb      	ldrb	r3, [r7, #6]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d109      	bne.n	8000854 <vButtonHandler+0x40>
        pre = 1;
 8000840:	2301      	movs	r3, #1
 8000842:	71fb      	strb	r3, [r7, #7]
        xQueueSend(xQueue,&item,0);
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <vButtonHandler+0x58>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	1d79      	adds	r1, r7, #5
 800084a:	2300      	movs	r3, #0
 800084c:	2200      	movs	r2, #0
 800084e:	f001 fc85 	bl	800215c <xQueueGenericSend>
 8000852:	e004      	b.n	800085e <vButtonHandler+0x4a>
      }
      else if(now == 0){
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d101      	bne.n	800085e <vButtonHandler+0x4a>
      pre = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	71fb      	strb	r3, [r7, #7]
      }
    }
    
	vTaskDelay(300);
 800085e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000862:	f002 f99d 	bl	8002ba0 <vTaskDelay>
    now = HAL_GPIO_ReadPin(Blue_Button_GPIO_Port,GPIO_PIN_0);
 8000866:	e7de      	b.n	8000826 <vButtonHandler+0x12>
 8000868:	40020000 	.word	0x40020000
 800086c:	20012d8c 	.word	0x20012d8c

08000870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d101      	bne.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000882:	f000 f90b 	bl	8000a9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40001000 	.word	0x40001000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <HAL_MspInit+0x4c>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x4c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	2036      	movs	r0, #54	; 0x36
 8000906:	f000 f9a1 	bl	8000c4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800090a:	2036      	movs	r0, #54	; 0x36
 800090c:	f000 f9ba 	bl	8000c84 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <HAL_InitTick+0xa0>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	4a1d      	ldr	r2, [pc, #116]	; (8000990 <HAL_InitTick+0xa0>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	6413      	str	r3, [r2, #64]	; 0x40
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <HAL_InitTick+0xa0>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800092c:	f107 0210 	add.w	r2, r7, #16
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f000 ffb4 	bl	80018a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800093c:	f000 ff9e 	bl	800187c <HAL_RCC_GetPCLK1Freq>
 8000940:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <HAL_InitTick+0xa4>)
 8000946:	fba2 2303 	umull	r2, r3, r2, r3
 800094a:	0c9b      	lsrs	r3, r3, #18
 800094c:	3b01      	subs	r3, #1
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_InitTick+0xa8>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <HAL_InitTick+0xac>)
 8000954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_InitTick+0xa8>)
 8000958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_InitTick+0xa8>)
 8000960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000962:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_InitTick+0xa8>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_InitTick+0xa8>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <HAL_InitTick+0xa8>)
 8000972:	f000 ffc9 	bl	8001908 <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d104      	bne.n	8000986 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <HAL_InitTick+0xa8>)
 800097e:	f001 f81d 	bl	80019bc <HAL_TIM_Base_Start_IT>
 8000982:	4603      	mov	r3, r0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3730      	adds	r7, #48	; 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	431bde83 	.word	0x431bde83
 8000998:	20012d90 	.word	0x20012d90
 800099c:	40001000 	.word	0x40001000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <TIM6_DAC_IRQHandler+0x10>)
 80009d2:	f001 f863 	bl	8001a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20012d90 	.word	0x20012d90

080009e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a0a:	490e      	ldr	r1, [pc, #56]	; (8000a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a20:	4c0b      	ldr	r4, [pc, #44]	; (8000a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a2e:	f7ff ffd7 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f003 fd33 	bl	800449c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a36:	f7ff fd47 	bl	80004c8 <main>
  bx  lr    
 8000a3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a48:	08004574 	.word	0x08004574
  ldr r2, =_sbss
 8000a4c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a50:	20012e1c 	.word	0x20012e1c

08000a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <HAL_Init+0x40>)
 8000a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_Init+0x40>)
 8000a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_Init+0x40>)
 8000a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f8d8 	bl	8000c36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f7ff ff32 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff ff08 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023c00 	.word	0x40023c00

08000a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x20>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20012dd8 	.word	0x20012dd8

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20012dd8 	.word	0x20012dd8

08000adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4907      	ldr	r1, [pc, #28]	; (8000b78 <__NVIC_EnableIRQ+0x38>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	; (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	; (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ff4c 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5e:	f7ff ff61 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000c62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	6978      	ldr	r0, [r7, #20]
 8000c6a:	f7ff ffb1 	bl	8000bd0 <NVIC_EncodePriority>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff80 	bl	8000b7c <__NVIC_SetPriority>
}
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff54 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	e16b      	b.n	8000f94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 815a 	bne.w	8000f8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d005      	beq.n	8000cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d130      	bne.n	8000d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	091b      	lsrs	r3, r3, #4
 8000d3e:	f003 0201 	and.w	r2, r3, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d017      	beq.n	8000d90 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d123      	bne.n	8000de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	69b9      	ldr	r1, [r7, #24]
 8000de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0203 	and.w	r2, r3, #3
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80b4 	beq.w	8000f8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b60      	ldr	r3, [pc, #384]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a5f      	ldr	r2, [pc, #380]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b5d      	ldr	r3, [pc, #372]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e42:	4a5b      	ldr	r2, [pc, #364]	; (8000fb0 <HAL_GPIO_Init+0x310>)
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a52      	ldr	r2, [pc, #328]	; (8000fb4 <HAL_GPIO_Init+0x314>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d02b      	beq.n	8000ec6 <HAL_GPIO_Init+0x226>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a51      	ldr	r2, [pc, #324]	; (8000fb8 <HAL_GPIO_Init+0x318>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d025      	beq.n	8000ec2 <HAL_GPIO_Init+0x222>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a50      	ldr	r2, [pc, #320]	; (8000fbc <HAL_GPIO_Init+0x31c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x21e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4f      	ldr	r2, [pc, #316]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x21a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x216>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4d      	ldr	r2, [pc, #308]	; (8000fc8 <HAL_GPIO_Init+0x328>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <HAL_GPIO_Init+0x32c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x20e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <HAL_GPIO_Init+0x330>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x20a>
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	e00e      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eaa:	2308      	movs	r3, #8
 8000eac:	e00c      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e00a      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	e008      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e004      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	f002 0203 	and.w	r2, r2, #3
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed8:	4935      	ldr	r1, [pc, #212]	; (8000fb0 <HAL_GPIO_Init+0x310>)
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f0a:	4a32      	ldr	r2, [pc, #200]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f34:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5e:	4a1d      	ldr	r2, [pc, #116]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f88:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	f67f ae90 	bls.w	8000cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40013800 	.word	0x40013800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40021400 	.word	0x40021400
 8000fcc:	40021800 	.word	0x40021800
 8000fd0:	40021c00 	.word	0x40021c00
 8000fd4:	40013c00 	.word	0x40013c00

08000fd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	e001      	b.n	8000ffa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
 8001014:	4613      	mov	r3, r2
 8001016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001018:	787b      	ldrb	r3, [r7, #1]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001024:	e003      	b.n	800102e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	041a      	lsls	r2, r3, #16
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	619a      	str	r2, [r3, #24]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e264      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d075      	beq.n	8001146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800105a:	4ba3      	ldr	r3, [pc, #652]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b04      	cmp	r3, #4
 8001064:	d00c      	beq.n	8001080 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001066:	4ba0      	ldr	r3, [pc, #640]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800106e:	2b08      	cmp	r3, #8
 8001070:	d112      	bne.n	8001098 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001072:	4b9d      	ldr	r3, [pc, #628]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800107e:	d10b      	bne.n	8001098 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001080:	4b99      	ldr	r3, [pc, #612]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d05b      	beq.n	8001144 <HAL_RCC_OscConfig+0x108>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d157      	bne.n	8001144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e23f      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a0:	d106      	bne.n	80010b0 <HAL_RCC_OscConfig+0x74>
 80010a2:	4b91      	ldr	r3, [pc, #580]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a90      	ldr	r2, [pc, #576]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e01d      	b.n	80010ec <HAL_RCC_OscConfig+0xb0>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x98>
 80010ba:	4b8b      	ldr	r3, [pc, #556]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a8a      	ldr	r2, [pc, #552]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b88      	ldr	r3, [pc, #544]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a87      	ldr	r2, [pc, #540]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e00b      	b.n	80010ec <HAL_RCC_OscConfig+0xb0>
 80010d4:	4b84      	ldr	r3, [pc, #528]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a83      	ldr	r2, [pc, #524]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b81      	ldr	r3, [pc, #516]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a80      	ldr	r2, [pc, #512]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d013      	beq.n	800111c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fce6 	bl	8000ac4 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fce2 	bl	8000ac4 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e204      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	4b76      	ldr	r3, [pc, #472]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f0      	beq.n	80010fc <HAL_RCC_OscConfig+0xc0>
 800111a:	e014      	b.n	8001146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111c:	f7ff fcd2 	bl	8000ac4 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001124:	f7ff fcce 	bl	8000ac4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b64      	cmp	r3, #100	; 0x64
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e1f0      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001136:	4b6c      	ldr	r3, [pc, #432]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f0      	bne.n	8001124 <HAL_RCC_OscConfig+0xe8>
 8001142:	e000      	b.n	8001146 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d063      	beq.n	800121a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00b      	beq.n	8001176 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800115e:	4b62      	ldr	r3, [pc, #392]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001166:	2b08      	cmp	r3, #8
 8001168:	d11c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800116a:	4b5f      	ldr	r3, [pc, #380]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d116      	bne.n	80011a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001176:	4b5c      	ldr	r3, [pc, #368]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <HAL_RCC_OscConfig+0x152>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d001      	beq.n	800118e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e1c4      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118e:	4b56      	ldr	r3, [pc, #344]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4952      	ldr	r1, [pc, #328]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a2:	e03a      	b.n	800121a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d020      	beq.n	80011ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ac:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <HAL_RCC_OscConfig+0x2b0>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b2:	f7ff fc87 	bl	8000ac4 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ba:	f7ff fc83 	bl	8000ac4 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e1a5      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011cc:	4b46      	ldr	r3, [pc, #280]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d8:	4b43      	ldr	r3, [pc, #268]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4940      	ldr	r1, [pc, #256]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	600b      	str	r3, [r1, #0]
 80011ec:	e015      	b.n	800121a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ee:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_RCC_OscConfig+0x2b0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f4:	f7ff fc66 	bl	8000ac4 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fc:	f7ff fc62 	bl	8000ac4 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e184      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d030      	beq.n	8001288 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d016      	beq.n	800125c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_RCC_OscConfig+0x2b4>)
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001234:	f7ff fc46 	bl	8000ac4 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800123c:	f7ff fc42 	bl	8000ac4 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e164      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0x200>
 800125a:	e015      	b.n	8001288 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <HAL_RCC_OscConfig+0x2b4>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001262:	f7ff fc2f 	bl	8000ac4 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800126a:	f7ff fc2b 	bl	8000ac4 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e14d      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 800127e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80a0 	beq.w	80013d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10f      	bne.n	80012c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012c2:	2301      	movs	r3, #1
 80012c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_RCC_OscConfig+0x2b8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d121      	bne.n	8001316 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_RCC_OscConfig+0x2b8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_RCC_OscConfig+0x2b8>)
 80012d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012de:	f7ff fbf1 	bl	8000ac4 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e4:	e011      	b.n	800130a <HAL_RCC_OscConfig+0x2ce>
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	42470000 	.word	0x42470000
 80012f0:	42470e80 	.word	0x42470e80
 80012f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f8:	f7ff fbe4 	bl	8000ac4 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e106      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	4b85      	ldr	r3, [pc, #532]	; (8001520 <HAL_RCC_OscConfig+0x4e4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d106      	bne.n	800132c <HAL_RCC_OscConfig+0x2f0>
 800131e:	4b81      	ldr	r3, [pc, #516]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001322:	4a80      	ldr	r2, [pc, #512]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6713      	str	r3, [r2, #112]	; 0x70
 800132a:	e01c      	b.n	8001366 <HAL_RCC_OscConfig+0x32a>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d10c      	bne.n	800134e <HAL_RCC_OscConfig+0x312>
 8001334:	4b7b      	ldr	r3, [pc, #492]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001338:	4a7a      	ldr	r2, [pc, #488]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6713      	str	r3, [r2, #112]	; 0x70
 8001340:	4b78      	ldr	r3, [pc, #480]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001344:	4a77      	ldr	r2, [pc, #476]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6713      	str	r3, [r2, #112]	; 0x70
 800134c:	e00b      	b.n	8001366 <HAL_RCC_OscConfig+0x32a>
 800134e:	4b75      	ldr	r3, [pc, #468]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001352:	4a74      	ldr	r2, [pc, #464]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	6713      	str	r3, [r2, #112]	; 0x70
 800135a:	4b72      	ldr	r3, [pc, #456]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135e:	4a71      	ldr	r2, [pc, #452]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001360:	f023 0304 	bic.w	r3, r3, #4
 8001364:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d015      	beq.n	800139a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136e:	f7ff fba9 	bl	8000ac4 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001374:	e00a      	b.n	800138c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001376:	f7ff fba5 	bl	8000ac4 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f241 3288 	movw	r2, #5000	; 0x1388
 8001384:	4293      	cmp	r3, r2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e0c5      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	4b65      	ldr	r3, [pc, #404]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0ee      	beq.n	8001376 <HAL_RCC_OscConfig+0x33a>
 8001398:	e014      	b.n	80013c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff fb93 	bl	8000ac4 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a0:	e00a      	b.n	80013b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a2:	f7ff fb8f 	bl	8000ac4 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e0af      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b8:	4b5a      	ldr	r3, [pc, #360]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 80013ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1ee      	bne.n	80013a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d105      	bne.n	80013d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ca:	4b56      	ldr	r3, [pc, #344]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a55      	ldr	r2, [pc, #340]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 80013d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 809b 	beq.w	8001516 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013e0:	4b50      	ldr	r3, [pc, #320]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d05c      	beq.n	80014a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d141      	bne.n	8001478 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f4:	4b4c      	ldr	r3, [pc, #304]	; (8001528 <HAL_RCC_OscConfig+0x4ec>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb63 	bl	8000ac4 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff fb5f 	bl	8000ac4 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e081      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001414:	4b43      	ldr	r3, [pc, #268]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69da      	ldr	r2, [r3, #28]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	019b      	lsls	r3, r3, #6
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	085b      	lsrs	r3, r3, #1
 8001438:	3b01      	subs	r3, #1
 800143a:	041b      	lsls	r3, r3, #16
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	061b      	lsls	r3, r3, #24
 8001444:	4937      	ldr	r1, [pc, #220]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800144a:	4b37      	ldr	r3, [pc, #220]	; (8001528 <HAL_RCC_OscConfig+0x4ec>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fb38 	bl	8000ac4 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff fb34 	bl	8000ac4 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e056      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146a:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x41c>
 8001476:	e04e      	b.n	8001516 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_RCC_OscConfig+0x4ec>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fb21 	bl	8000ac4 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff fb1d 	bl	8000ac4 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e03f      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001498:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0x44a>
 80014a4:	e037      	b.n	8001516 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e032      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d028      	beq.n	8001512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d121      	bne.n	8001512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d8:	429a      	cmp	r2, r3
 80014da:	d11a      	bne.n	8001512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014e2:	4013      	ands	r3, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d111      	bne.n	8001512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	085b      	lsrs	r3, r3, #1
 80014fa:	3b01      	subs	r3, #1
 80014fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d107      	bne.n	8001512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40007000 	.word	0x40007000
 8001524:	40023800 	.word	0x40023800
 8001528:	42470060 	.word	0x42470060

0800152c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0cc      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001540:	4b68      	ldr	r3, [pc, #416]	; (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d90c      	bls.n	8001568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0b8      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001580:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4a58      	ldr	r2, [pc, #352]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800158a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001598:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a52      	ldr	r2, [pc, #328]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a4:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	494d      	ldr	r1, [pc, #308]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d044      	beq.n	800164c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d119      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e07f      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d003      	beq.n	80015ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e06f      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	4b3b      	ldr	r3, [pc, #236]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e067      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160a:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f023 0203 	bic.w	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4934      	ldr	r1, [pc, #208]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	4313      	orrs	r3, r2
 800161a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800161c:	f7ff fa52 	bl	8000ac4 <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	e00a      	b.n	800163a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001624:	f7ff fa4e 	bl	8000ac4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e04f      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 020c 	and.w	r2, r3, #12
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	429a      	cmp	r2, r3
 800164a:	d1eb      	bne.n	8001624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800164c:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d20c      	bcs.n	8001674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e032      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4916      	ldr	r1, [pc, #88]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	490e      	ldr	r1, [pc, #56]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016b2:	f000 f821 	bl	80016f8 <HAL_RCC_GetSysClockFreq>
 80016b6:	4602      	mov	r2, r0
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	490a      	ldr	r1, [pc, #40]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	5ccb      	ldrb	r3, [r1, r3]
 80016c6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_RCC_ClockConfig+0x1c8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff f90c 	bl	80008f0 <HAL_InitTick>

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00
 80016e8:	40023800 	.word	0x40023800
 80016ec:	0800454c 	.word	0x0800454c
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f8:	b5b0      	push	{r4, r5, r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016fe:	2100      	movs	r1, #0
 8001700:	6079      	str	r1, [r7, #4]
 8001702:	2100      	movs	r1, #0
 8001704:	60f9      	str	r1, [r7, #12]
 8001706:	2100      	movs	r1, #0
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800170a:	2100      	movs	r1, #0
 800170c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800170e:	4952      	ldr	r1, [pc, #328]	; (8001858 <HAL_RCC_GetSysClockFreq+0x160>)
 8001710:	6889      	ldr	r1, [r1, #8]
 8001712:	f001 010c 	and.w	r1, r1, #12
 8001716:	2908      	cmp	r1, #8
 8001718:	d00d      	beq.n	8001736 <HAL_RCC_GetSysClockFreq+0x3e>
 800171a:	2908      	cmp	r1, #8
 800171c:	f200 8094 	bhi.w	8001848 <HAL_RCC_GetSysClockFreq+0x150>
 8001720:	2900      	cmp	r1, #0
 8001722:	d002      	beq.n	800172a <HAL_RCC_GetSysClockFreq+0x32>
 8001724:	2904      	cmp	r1, #4
 8001726:	d003      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x38>
 8001728:	e08e      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800172a:	4b4c      	ldr	r3, [pc, #304]	; (800185c <HAL_RCC_GetSysClockFreq+0x164>)
 800172c:	60bb      	str	r3, [r7, #8]
       break;
 800172e:	e08e      	b.n	800184e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001730:	4b4b      	ldr	r3, [pc, #300]	; (8001860 <HAL_RCC_GetSysClockFreq+0x168>)
 8001732:	60bb      	str	r3, [r7, #8]
      break;
 8001734:	e08b      	b.n	800184e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001736:	4948      	ldr	r1, [pc, #288]	; (8001858 <HAL_RCC_GetSysClockFreq+0x160>)
 8001738:	6849      	ldr	r1, [r1, #4]
 800173a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800173e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001740:	4945      	ldr	r1, [pc, #276]	; (8001858 <HAL_RCC_GetSysClockFreq+0x160>)
 8001742:	6849      	ldr	r1, [r1, #4]
 8001744:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001748:	2900      	cmp	r1, #0
 800174a:	d024      	beq.n	8001796 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174c:	4942      	ldr	r1, [pc, #264]	; (8001858 <HAL_RCC_GetSysClockFreq+0x160>)
 800174e:	6849      	ldr	r1, [r1, #4]
 8001750:	0989      	lsrs	r1, r1, #6
 8001752:	4608      	mov	r0, r1
 8001754:	f04f 0100 	mov.w	r1, #0
 8001758:	f240 14ff 	movw	r4, #511	; 0x1ff
 800175c:	f04f 0500 	mov.w	r5, #0
 8001760:	ea00 0204 	and.w	r2, r0, r4
 8001764:	ea01 0305 	and.w	r3, r1, r5
 8001768:	493d      	ldr	r1, [pc, #244]	; (8001860 <HAL_RCC_GetSysClockFreq+0x168>)
 800176a:	fb01 f003 	mul.w	r0, r1, r3
 800176e:	2100      	movs	r1, #0
 8001770:	fb01 f102 	mul.w	r1, r1, r2
 8001774:	1844      	adds	r4, r0, r1
 8001776:	493a      	ldr	r1, [pc, #232]	; (8001860 <HAL_RCC_GetSysClockFreq+0x168>)
 8001778:	fba2 0101 	umull	r0, r1, r2, r1
 800177c:	1863      	adds	r3, r4, r1
 800177e:	4619      	mov	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	461a      	mov	r2, r3
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	f7fe fd22 	bl	80001d0 <__aeabi_uldivmod>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4613      	mov	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	e04a      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <HAL_RCC_GetSysClockFreq+0x160>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	099b      	lsrs	r3, r3, #6
 800179c:	461a      	mov	r2, r3
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017a6:	f04f 0100 	mov.w	r1, #0
 80017aa:	ea02 0400 	and.w	r4, r2, r0
 80017ae:	ea03 0501 	and.w	r5, r3, r1
 80017b2:	4620      	mov	r0, r4
 80017b4:	4629      	mov	r1, r5
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	014b      	lsls	r3, r1, #5
 80017c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017c4:	0142      	lsls	r2, r0, #5
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	1b00      	subs	r0, r0, r4
 80017cc:	eb61 0105 	sbc.w	r1, r1, r5
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	018b      	lsls	r3, r1, #6
 80017da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017de:	0182      	lsls	r2, r0, #6
 80017e0:	1a12      	subs	r2, r2, r0
 80017e2:	eb63 0301 	sbc.w	r3, r3, r1
 80017e6:	f04f 0000 	mov.w	r0, #0
 80017ea:	f04f 0100 	mov.w	r1, #0
 80017ee:	00d9      	lsls	r1, r3, #3
 80017f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017f4:	00d0      	lsls	r0, r2, #3
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	1912      	adds	r2, r2, r4
 80017fc:	eb45 0303 	adc.w	r3, r5, r3
 8001800:	f04f 0000 	mov.w	r0, #0
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	0299      	lsls	r1, r3, #10
 800180a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800180e:	0290      	lsls	r0, r2, #10
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	461a      	mov	r2, r3
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	f7fe fcd6 	bl	80001d0 <__aeabi_uldivmod>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4613      	mov	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_RCC_GetSysClockFreq+0x160>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	3301      	adds	r3, #1
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	fbb2 f3f3 	udiv	r3, r2, r3
 8001844:	60bb      	str	r3, [r7, #8]
      break;
 8001846:	e002      	b.n	800184e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <HAL_RCC_GetSysClockFreq+0x164>)
 800184a:	60bb      	str	r3, [r7, #8]
      break;
 800184c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800184e:	68bb      	ldr	r3, [r7, #8]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bdb0      	pop	{r4, r5, r7, pc}
 8001858:	40023800 	.word	0x40023800
 800185c:	00f42400 	.word	0x00f42400
 8001860:	017d7840 	.word	0x017d7840

08001864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_RCC_GetHCLKFreq+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000000 	.word	0x20000000

0800187c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001880:	f7ff fff0 	bl	8001864 <HAL_RCC_GetHCLKFreq>
 8001884:	4602      	mov	r2, r0
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	0a9b      	lsrs	r3, r3, #10
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	4903      	ldr	r1, [pc, #12]	; (80018a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001892:	5ccb      	ldrb	r3, [r1, r3]
 8001894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001898:	4618      	mov	r0, r3
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	0800455c 	.word	0x0800455c

080018a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	220f      	movs	r2, #15
 80018b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_GetClockConfig+0x5c>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 0203 	and.w	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_RCC_GetClockConfig+0x5c>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_RCC_GetClockConfig+0x5c>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_RCC_GetClockConfig+0x5c>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	08db      	lsrs	r3, r3, #3
 80018de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <HAL_RCC_GetClockConfig+0x60>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0207 	and.w	r2, r3, #7
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	601a      	str	r2, [r3, #0]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40023c00 	.word	0x40023c00

08001908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e041      	b.n	800199e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f839 	bl	80019a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3304      	adds	r3, #4
 8001944:	4619      	mov	r1, r3
 8001946:	4610      	mov	r0, r2
 8001948:	f000 f9d8 	bl	8001cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d001      	beq.n	80019d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e04e      	b.n	8001a72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <HAL_TIM_Base_Start_IT+0xc4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d022      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fe:	d01d      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d018      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a1e      	ldr	r2, [pc, #120]	; (8001a88 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d013      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1c      	ldr	r2, [pc, #112]	; (8001a8c <HAL_TIM_Base_Start_IT+0xd0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00e      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1b      	ldr	r2, [pc, #108]	; (8001a90 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d009      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d004      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x80>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d111      	bne.n	8001a60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d010      	beq.n	8001a70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0201 	orr.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5e:	e007      	b.n	8001a70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40010000 	.word	0x40010000
 8001a84:	40000400 	.word	0x40000400
 8001a88:	40000800 	.word	0x40000800
 8001a8c:	40000c00 	.word	0x40000c00
 8001a90:	40010400 	.word	0x40010400
 8001a94:	40014000 	.word	0x40014000
 8001a98:	40001800 	.word	0x40001800

08001a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d122      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d11b      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f06f 0202 	mvn.w	r2, #2
 8001ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f8ee 	bl	8001cc0 <HAL_TIM_IC_CaptureCallback>
 8001ae4:	e005      	b.n	8001af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f8e0 	bl	8001cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f8f1 	bl	8001cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d122      	bne.n	8001b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d11b      	bne.n	8001b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0204 	mvn.w	r2, #4
 8001b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2202      	movs	r2, #2
 8001b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f8c4 	bl	8001cc0 <HAL_TIM_IC_CaptureCallback>
 8001b38:	e005      	b.n	8001b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f8b6 	bl	8001cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f8c7 	bl	8001cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d122      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d11b      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0208 	mvn.w	r2, #8
 8001b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2204      	movs	r2, #4
 8001b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f89a 	bl	8001cc0 <HAL_TIM_IC_CaptureCallback>
 8001b8c:	e005      	b.n	8001b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f88c 	bl	8001cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f89d 	bl	8001cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	d122      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b10      	cmp	r3, #16
 8001bba:	d11b      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0210 	mvn.w	r2, #16
 8001bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f870 	bl	8001cc0 <HAL_TIM_IC_CaptureCallback>
 8001be0:	e005      	b.n	8001bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f862 	bl	8001cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f873 	bl	8001cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10e      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d107      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0201 	mvn.w	r2, #1
 8001c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7fe fe28 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	2b80      	cmp	r3, #128	; 0x80
 8001c2c:	d10e      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c38:	2b80      	cmp	r3, #128	; 0x80
 8001c3a:	d107      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f902 	bl	8001e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c56:	2b40      	cmp	r3, #64	; 0x40
 8001c58:	d10e      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c64:	2b40      	cmp	r3, #64	; 0x40
 8001c66:	d107      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f838 	bl	8001ce8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b20      	cmp	r3, #32
 8001c84:	d10e      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d107      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0220 	mvn.w	r2, #32
 8001c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f8cc 	bl	8001e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a40      	ldr	r2, [pc, #256]	; (8001e10 <TIM_Base_SetConfig+0x114>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d013      	beq.n	8001d3c <TIM_Base_SetConfig+0x40>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1a:	d00f      	beq.n	8001d3c <TIM_Base_SetConfig+0x40>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a3d      	ldr	r2, [pc, #244]	; (8001e14 <TIM_Base_SetConfig+0x118>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00b      	beq.n	8001d3c <TIM_Base_SetConfig+0x40>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3c      	ldr	r2, [pc, #240]	; (8001e18 <TIM_Base_SetConfig+0x11c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d007      	beq.n	8001d3c <TIM_Base_SetConfig+0x40>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a3b      	ldr	r2, [pc, #236]	; (8001e1c <TIM_Base_SetConfig+0x120>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d003      	beq.n	8001d3c <TIM_Base_SetConfig+0x40>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a3a      	ldr	r2, [pc, #232]	; (8001e20 <TIM_Base_SetConfig+0x124>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d108      	bne.n	8001d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a2f      	ldr	r2, [pc, #188]	; (8001e10 <TIM_Base_SetConfig+0x114>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d02b      	beq.n	8001dae <TIM_Base_SetConfig+0xb2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5c:	d027      	beq.n	8001dae <TIM_Base_SetConfig+0xb2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a2c      	ldr	r2, [pc, #176]	; (8001e14 <TIM_Base_SetConfig+0x118>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d023      	beq.n	8001dae <TIM_Base_SetConfig+0xb2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a2b      	ldr	r2, [pc, #172]	; (8001e18 <TIM_Base_SetConfig+0x11c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d01f      	beq.n	8001dae <TIM_Base_SetConfig+0xb2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a2a      	ldr	r2, [pc, #168]	; (8001e1c <TIM_Base_SetConfig+0x120>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01b      	beq.n	8001dae <TIM_Base_SetConfig+0xb2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a29      	ldr	r2, [pc, #164]	; (8001e20 <TIM_Base_SetConfig+0x124>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d017      	beq.n	8001dae <TIM_Base_SetConfig+0xb2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a28      	ldr	r2, [pc, #160]	; (8001e24 <TIM_Base_SetConfig+0x128>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <TIM_Base_SetConfig+0xb2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a27      	ldr	r2, [pc, #156]	; (8001e28 <TIM_Base_SetConfig+0x12c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00f      	beq.n	8001dae <TIM_Base_SetConfig+0xb2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <TIM_Base_SetConfig+0x130>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00b      	beq.n	8001dae <TIM_Base_SetConfig+0xb2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a25      	ldr	r2, [pc, #148]	; (8001e30 <TIM_Base_SetConfig+0x134>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <TIM_Base_SetConfig+0xb2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a24      	ldr	r2, [pc, #144]	; (8001e34 <TIM_Base_SetConfig+0x138>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d003      	beq.n	8001dae <TIM_Base_SetConfig+0xb2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a23      	ldr	r2, [pc, #140]	; (8001e38 <TIM_Base_SetConfig+0x13c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d108      	bne.n	8001dc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <TIM_Base_SetConfig+0x114>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d003      	beq.n	8001df4 <TIM_Base_SetConfig+0xf8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <TIM_Base_SetConfig+0x124>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d103      	bne.n	8001dfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	615a      	str	r2, [r3, #20]
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40010000 	.word	0x40010000
 8001e14:	40000400 	.word	0x40000400
 8001e18:	40000800 	.word	0x40000800
 8001e1c:	40000c00 	.word	0x40000c00
 8001e20:	40010400 	.word	0x40010400
 8001e24:	40014000 	.word	0x40014000
 8001e28:	40014400 	.word	0x40014400
 8001e2c:	40014800 	.word	0x40014800
 8001e30:	40001800 	.word	0x40001800
 8001e34:	40001c00 	.word	0x40001c00
 8001e38:	40002000 	.word	0x40002000

08001e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f103 0208 	add.w	r2, r3, #8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f103 0208 	add.w	r2, r3, #8
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f103 0208 	add.w	r2, r3, #8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	601a      	str	r2, [r3, #0]
}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d103      	bne.n	8001f26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	e00c      	b.n	8001f40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3308      	adds	r3, #8
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	e002      	b.n	8001f34 <vListInsert+0x2e>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d2f6      	bcs.n	8001f2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	601a      	str	r2, [r3, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6892      	ldr	r2, [r2, #8]
 8001f8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6852      	ldr	r2, [r2, #4]
 8001f98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d103      	bne.n	8001fac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	1e5a      	subs	r2, r3, #1
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10a      	bne.n	8001ff6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe4:	f383 8811 	msr	BASEPRI, r3
 8001fe8:	f3bf 8f6f 	isb	sy
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001ff2:	bf00      	nop
 8001ff4:	e7fe      	b.n	8001ff4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001ff6:	f001 ff55 	bl	8003ea4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002002:	68f9      	ldr	r1, [r7, #12]
 8002004:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	441a      	add	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002026:	3b01      	subs	r3, #1
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	441a      	add	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	22ff      	movs	r2, #255	; 0xff
 800203a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	22ff      	movs	r2, #255	; 0xff
 8002042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d114      	bne.n	8002076 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01a      	beq.n	800208a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3310      	adds	r3, #16
 8002058:	4618      	mov	r0, r3
 800205a:	f001 f841 	bl	80030e0 <xTaskRemoveFromEventList>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d012      	beq.n	800208a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <xQueueGenericReset+0xcc>)
 8002066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	f3bf 8f6f 	isb	sy
 8002074:	e009      	b.n	800208a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3310      	adds	r3, #16
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fef2 	bl	8001e64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3324      	adds	r3, #36	; 0x24
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff feed 	bl	8001e64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800208a:	f001 ff3b 	bl	8003f04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	e000ed04 	.word	0xe000ed04

0800209c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	4613      	mov	r3, r2
 80020a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10a      	bne.n	80020c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80020b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b4:	f383 8811 	msr	BASEPRI, r3
 80020b8:	f3bf 8f6f 	isb	sy
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	613b      	str	r3, [r7, #16]
}
 80020c2:	bf00      	nop
 80020c4:	e7fe      	b.n	80020c4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	e004      	b.n	80020dc <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	3350      	adds	r3, #80	; 0x50
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 f801 	bl	80040e8 <pvPortMalloc>
 80020e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00d      	beq.n	800210a <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3350      	adds	r3, #80	; 0x50
 80020f6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020f8:	79fa      	ldrb	r2, [r7, #7]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	4613      	mov	r3, r2
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	68b9      	ldr	r1, [r7, #8]
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 f805 	bl	8002114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800210a:	69bb      	ldr	r3, [r7, #24]
	}
 800210c:	4618      	mov	r0, r3
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d103      	bne.n	8002130 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e002      	b.n	8002136 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002142:	2101      	movs	r1, #1
 8002144:	69b8      	ldr	r0, [r7, #24]
 8002146:	f7ff ff41 	bl	8001fcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08e      	sub	sp, #56	; 0x38
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10a      	bne.n	800218e <xQueueGenericSend+0x32>
	__asm volatile
 8002178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217c:	f383 8811 	msr	BASEPRI, r3
 8002180:	f3bf 8f6f 	isb	sy
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800218a:	bf00      	nop
 800218c:	e7fe      	b.n	800218c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d103      	bne.n	800219c <xQueueGenericSend+0x40>
 8002194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <xQueueGenericSend+0x44>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <xQueueGenericSend+0x46>
 80021a0:	2300      	movs	r3, #0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10a      	bne.n	80021bc <xQueueGenericSend+0x60>
	__asm volatile
 80021a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021aa:	f383 8811 	msr	BASEPRI, r3
 80021ae:	f3bf 8f6f 	isb	sy
 80021b2:	f3bf 8f4f 	dsb	sy
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80021b8:	bf00      	nop
 80021ba:	e7fe      	b.n	80021ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d103      	bne.n	80021ca <xQueueGenericSend+0x6e>
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <xQueueGenericSend+0x72>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <xQueueGenericSend+0x74>
 80021ce:	2300      	movs	r3, #0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <xQueueGenericSend+0x8e>
	__asm volatile
 80021d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	623b      	str	r3, [r7, #32]
}
 80021e6:	bf00      	nop
 80021e8:	e7fe      	b.n	80021e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021ea:	f001 f915 	bl	8003418 <xTaskGetSchedulerState>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <xQueueGenericSend+0x9e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <xQueueGenericSend+0xa2>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <xQueueGenericSend+0xa4>
 80021fe:	2300      	movs	r3, #0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10a      	bne.n	800221a <xQueueGenericSend+0xbe>
	__asm volatile
 8002204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002208:	f383 8811 	msr	BASEPRI, r3
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	61fb      	str	r3, [r7, #28]
}
 8002216:	bf00      	nop
 8002218:	e7fe      	b.n	8002218 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800221a:	f001 fe43 	bl	8003ea4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	429a      	cmp	r2, r3
 8002228:	d302      	bcc.n	8002230 <xQueueGenericSend+0xd4>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d129      	bne.n	8002284 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002236:	f000 fa07 	bl	8002648 <prvCopyDataToQueue>
 800223a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	2b00      	cmp	r3, #0
 8002242:	d010      	beq.n	8002266 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	3324      	adds	r3, #36	; 0x24
 8002248:	4618      	mov	r0, r3
 800224a:	f000 ff49 	bl	80030e0 <xTaskRemoveFromEventList>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002254:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <xQueueGenericSend+0x1f8>)
 8002256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	f3bf 8f4f 	dsb	sy
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	e00a      	b.n	800227c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800226c:	4b39      	ldr	r3, [pc, #228]	; (8002354 <xQueueGenericSend+0x1f8>)
 800226e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800227c:	f001 fe42 	bl	8003f04 <vPortExitCritical>
				return pdPASS;
 8002280:	2301      	movs	r3, #1
 8002282:	e063      	b.n	800234c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d103      	bne.n	8002292 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800228a:	f001 fe3b 	bl	8003f04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800228e:	2300      	movs	r3, #0
 8002290:	e05c      	b.n	800234c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4618      	mov	r0, r3
 800229e:	f000 ff81 	bl	80031a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80022a2:	2301      	movs	r3, #1
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022a6:	f001 fe2d 	bl	8003f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022aa:	f000 fcfb 	bl	8002ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022ae:	f001 fdf9 	bl	8003ea4 <vPortEnterCritical>
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022b8:	b25b      	sxtb	r3, r3
 80022ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022be:	d103      	bne.n	80022c8 <xQueueGenericSend+0x16c>
 80022c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022ce:	b25b      	sxtb	r3, r3
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d103      	bne.n	80022de <xQueueGenericSend+0x182>
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022de:	f001 fe11 	bl	8003f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022e2:	1d3a      	adds	r2, r7, #4
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 ff70 	bl	80031d0 <xTaskCheckForTimeOut>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d124      	bne.n	8002340 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80022f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022f8:	f000 fa9e 	bl	8002838 <prvIsQueueFull>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d018      	beq.n	8002334 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	3310      	adds	r3, #16
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fe98 	bl	8003040 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002312:	f000 fa29 	bl	8002768 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002316:	f000 fcd3 	bl	8002cc0 <xTaskResumeAll>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	f47f af7c 	bne.w	800221a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <xQueueGenericSend+0x1f8>)
 8002324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f3bf 8f4f 	dsb	sy
 800232e:	f3bf 8f6f 	isb	sy
 8002332:	e772      	b.n	800221a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002336:	f000 fa17 	bl	8002768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800233a:	f000 fcc1 	bl	8002cc0 <xTaskResumeAll>
 800233e:	e76c      	b.n	800221a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002342:	f000 fa11 	bl	8002768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002346:	f000 fcbb 	bl	8002cc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800234a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800234c:	4618      	mov	r0, r3
 800234e:	3738      	adds	r7, #56	; 0x38
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	e000ed04 	.word	0xe000ed04

08002358 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08e      	sub	sp, #56	; 0x38
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002382:	bf00      	nop
 8002384:	e7fe      	b.n	8002384 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d103      	bne.n	8002394 <xQueueGenericSendFromISR+0x3c>
 800238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <xQueueGenericSendFromISR+0x40>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <xQueueGenericSendFromISR+0x42>
 8002398:	2300      	movs	r3, #0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10a      	bne.n	80023b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	623b      	str	r3, [r7, #32]
}
 80023b0:	bf00      	nop
 80023b2:	e7fe      	b.n	80023b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d103      	bne.n	80023c2 <xQueueGenericSendFromISR+0x6a>
 80023ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <xQueueGenericSendFromISR+0x6e>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <xQueueGenericSendFromISR+0x70>
 80023c6:	2300      	movs	r3, #0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10a      	bne.n	80023e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80023cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d0:	f383 8811 	msr	BASEPRI, r3
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	61fb      	str	r3, [r7, #28]
}
 80023de:	bf00      	nop
 80023e0:	e7fe      	b.n	80023e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80023e2:	f001 fe41 	bl	8004068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80023e6:	f3ef 8211 	mrs	r2, BASEPRI
 80023ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ee:	f383 8811 	msr	BASEPRI, r3
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	61ba      	str	r2, [r7, #24]
 80023fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80023fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	429a      	cmp	r2, r3
 800240c:	d302      	bcc.n	8002414 <xQueueGenericSendFromISR+0xbc>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d12c      	bne.n	800246e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800241a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002424:	f000 f910 	bl	8002648 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002428:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d112      	bne.n	8002458 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	2b00      	cmp	r3, #0
 8002438:	d016      	beq.n	8002468 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243c:	3324      	adds	r3, #36	; 0x24
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fe4e 	bl	80030e0 <xTaskRemoveFromEventList>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00e      	beq.n	8002468 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00b      	beq.n	8002468 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e007      	b.n	8002468 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002458:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800245c:	3301      	adds	r3, #1
 800245e:	b2db      	uxtb	r3, r3
 8002460:	b25a      	sxtb	r2, r3
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002468:	2301      	movs	r3, #1
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800246c:	e001      	b.n	8002472 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800246e:	2300      	movs	r3, #0
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
 8002472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002474:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800247c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800247e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002480:	4618      	mov	r0, r3
 8002482:	3738      	adds	r7, #56	; 0x38
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	; 0x30
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <xQueueReceive+0x30>
	__asm volatile
 80024a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	623b      	str	r3, [r7, #32]
}
 80024b4:	bf00      	nop
 80024b6:	e7fe      	b.n	80024b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <xQueueReceive+0x3e>
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <xQueueReceive+0x42>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <xQueueReceive+0x44>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <xQueueReceive+0x5e>
	__asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	61fb      	str	r3, [r7, #28]
}
 80024e2:	bf00      	nop
 80024e4:	e7fe      	b.n	80024e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024e6:	f000 ff97 	bl	8003418 <xTaskGetSchedulerState>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <xQueueReceive+0x6e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <xQueueReceive+0x72>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <xQueueReceive+0x74>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10a      	bne.n	8002516 <xQueueReceive+0x8e>
	__asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	61bb      	str	r3, [r7, #24]
}
 8002512:	bf00      	nop
 8002514:	e7fe      	b.n	8002514 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002516:	f001 fcc5 	bl	8003ea4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01f      	beq.n	8002566 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800252a:	f000 f8f7 	bl	800271c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	1e5a      	subs	r2, r3, #1
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00f      	beq.n	800255e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	3310      	adds	r3, #16
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fdcc 	bl	80030e0 <xTaskRemoveFromEventList>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800254e:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <xQueueReceive+0x1bc>)
 8002550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800255e:	f001 fcd1 	bl	8003f04 <vPortExitCritical>
				return pdPASS;
 8002562:	2301      	movs	r3, #1
 8002564:	e069      	b.n	800263a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800256c:	f001 fcca 	bl	8003f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002570:	2300      	movs	r3, #0
 8002572:	e062      	b.n	800263a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800257a:	f107 0310 	add.w	r3, r7, #16
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fe10 	bl	80031a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002584:	2301      	movs	r3, #1
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002588:	f001 fcbc 	bl	8003f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800258c:	f000 fb8a 	bl	8002ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002590:	f001 fc88 	bl	8003ea4 <vPortEnterCritical>
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800259a:	b25b      	sxtb	r3, r3
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d103      	bne.n	80025aa <xQueueReceive+0x122>
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025b0:	b25b      	sxtb	r3, r3
 80025b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b6:	d103      	bne.n	80025c0 <xQueueReceive+0x138>
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025c0:	f001 fca0 	bl	8003f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025c4:	1d3a      	adds	r2, r7, #4
 80025c6:	f107 0310 	add.w	r3, r7, #16
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fdff 	bl	80031d0 <xTaskCheckForTimeOut>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d123      	bne.n	8002620 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025da:	f000 f917 	bl	800280c <prvIsQueueEmpty>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d017      	beq.n	8002614 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	3324      	adds	r3, #36	; 0x24
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fd27 	bl	8003040 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80025f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025f4:	f000 f8b8 	bl	8002768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80025f8:	f000 fb62 	bl	8002cc0 <xTaskResumeAll>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d189      	bne.n	8002516 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <xQueueReceive+0x1bc>)
 8002604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	e780      	b.n	8002516 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002616:	f000 f8a7 	bl	8002768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800261a:	f000 fb51 	bl	8002cc0 <xTaskResumeAll>
 800261e:	e77a      	b.n	8002516 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002622:	f000 f8a1 	bl	8002768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002626:	f000 fb4b 	bl	8002cc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800262a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800262c:	f000 f8ee 	bl	800280c <prvIsQueueEmpty>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	f43f af6f 	beq.w	8002516 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002638:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800263a:	4618      	mov	r0, r3
 800263c:	3730      	adds	r7, #48	; 0x30
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	e000ed04 	.word	0xe000ed04

08002648 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10d      	bne.n	8002682 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d14d      	bne.n	800270a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4618      	mov	r0, r3
 8002674:	f000 feee 	bl	8003454 <xTaskPriorityDisinherit>
 8002678:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	e043      	b.n	800270a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d119      	bne.n	80026bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6858      	ldr	r0, [r3, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	461a      	mov	r2, r3
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	f001 ff26 	bl	80044e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	441a      	add	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d32b      	bcc.n	800270a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	e026      	b.n	800270a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	68d8      	ldr	r0, [r3, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	461a      	mov	r2, r3
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	f001 ff0c 	bl	80044e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	425b      	negs	r3, r3
 80026d6:	441a      	add	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d207      	bcs.n	80026f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	425b      	negs	r3, r3
 80026f2:	441a      	add	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d105      	bne.n	800270a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	3b01      	subs	r3, #1
 8002708:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002712:	697b      	ldr	r3, [r7, #20]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d018      	beq.n	8002760 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	441a      	add	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	429a      	cmp	r2, r3
 8002746:	d303      	bcc.n	8002750 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68d9      	ldr	r1, [r3, #12]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	461a      	mov	r2, r3
 800275a:	6838      	ldr	r0, [r7, #0]
 800275c:	f001 fec2 	bl	80044e4 <memcpy>
	}
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002770:	f001 fb98 	bl	8003ea4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800277a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800277c:	e011      	b.n	80027a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	2b00      	cmp	r3, #0
 8002784:	d012      	beq.n	80027ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3324      	adds	r3, #36	; 0x24
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fca8 	bl	80030e0 <xTaskRemoveFromEventList>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002796:	f000 fd7d 	bl	8003294 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	3b01      	subs	r3, #1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	dce9      	bgt.n	800277e <prvUnlockQueue+0x16>
 80027aa:	e000      	b.n	80027ae <prvUnlockQueue+0x46>
					break;
 80027ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	22ff      	movs	r2, #255	; 0xff
 80027b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80027b6:	f001 fba5 	bl	8003f04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027ba:	f001 fb73 	bl	8003ea4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027c6:	e011      	b.n	80027ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d012      	beq.n	80027f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3310      	adds	r3, #16
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fc83 	bl	80030e0 <xTaskRemoveFromEventList>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80027e0:	f000 fd58 	bl	8003294 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80027e4:	7bbb      	ldrb	r3, [r7, #14]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	dce9      	bgt.n	80027c8 <prvUnlockQueue+0x60>
 80027f4:	e000      	b.n	80027f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80027f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	22ff      	movs	r2, #255	; 0xff
 80027fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002800:	f001 fb80 	bl	8003f04 <vPortExitCritical>
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002814:	f001 fb46 	bl	8003ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002820:	2301      	movs	r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e001      	b.n	800282a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800282a:	f001 fb6b 	bl	8003f04 <vPortExitCritical>

	return xReturn;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002840:	f001 fb30 	bl	8003ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284c:	429a      	cmp	r2, r3
 800284e:	d102      	bne.n	8002856 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002850:	2301      	movs	r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e001      	b.n	800285a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800285a:	f001 fb53 	bl	8003f04 <vPortExitCritical>

	return xReturn;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e014      	b.n	80028a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002878:	4a0f      	ldr	r2, [pc, #60]	; (80028b8 <vQueueAddToRegistry+0x50>)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002884:	490c      	ldr	r1, [pc, #48]	; (80028b8 <vQueueAddToRegistry+0x50>)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <vQueueAddToRegistry+0x50>)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800289a:	e006      	b.n	80028aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3301      	adds	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b07      	cmp	r3, #7
 80028a6:	d9e7      	bls.n	8002878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20012ddc 	.word	0x20012ddc

080028bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80028cc:	f001 faea 	bl	8003ea4 <vPortEnterCritical>
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028d6:	b25b      	sxtb	r3, r3
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d103      	bne.n	80028e6 <vQueueWaitForMessageRestricted+0x2a>
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ec:	b25b      	sxtb	r3, r3
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d103      	bne.n	80028fc <vQueueWaitForMessageRestricted+0x40>
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028fc:	f001 fb02 	bl	8003f04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	2b00      	cmp	r3, #0
 8002906:	d106      	bne.n	8002916 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3324      	adds	r3, #36	; 0x24
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fbb9 	bl	8003088 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002916:	6978      	ldr	r0, [r7, #20]
 8002918:	f7ff ff26 	bl	8002768 <prvUnlockQueue>
	}
 800291c:	bf00      	nop
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08c      	sub	sp, #48	; 0x30
 8002928:	af04      	add	r7, sp, #16
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4618      	mov	r0, r3
 800293a:	f001 fbd5 	bl	80040e8 <pvPortMalloc>
 800293e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00e      	beq.n	8002964 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002946:	2058      	movs	r0, #88	; 0x58
 8002948:	f001 fbce 	bl	80040e8 <pvPortMalloc>
 800294c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	631a      	str	r2, [r3, #48]	; 0x30
 800295a:	e005      	b.n	8002968 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800295c:	6978      	ldr	r0, [r7, #20]
 800295e:	f001 fc87 	bl	8004270 <vPortFree>
 8002962:	e001      	b.n	8002968 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d013      	beq.n	8002996 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800296e:	88fa      	ldrh	r2, [r7, #6]
 8002970:	2300      	movs	r3, #0
 8002972:	9303      	str	r3, [sp, #12]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	9302      	str	r3, [sp, #8]
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f80e 	bl	80029a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800298a:	69f8      	ldr	r0, [r7, #28]
 800298c:	f000 f89a 	bl	8002ac4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002990:	2301      	movs	r3, #1
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	e002      	b.n	800299c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800299c:	69bb      	ldr	r3, [r7, #24]
	}
 800299e:	4618      	mov	r0, r3
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b088      	sub	sp, #32
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	461a      	mov	r2, r3
 80029be:	21a5      	movs	r1, #165	; 0xa5
 80029c0:	f001 fd9e 	bl	8004500 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029ce:	3b01      	subs	r3, #1
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f023 0307 	bic.w	r3, r3, #7
 80029dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <prvInitialiseNewTask+0x58>
	__asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	617b      	str	r3, [r7, #20]
}
 80029fa:	bf00      	nop
 80029fc:	e7fe      	b.n	80029fc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01f      	beq.n	8002a44 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
 8002a08:	e012      	b.n	8002a30 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	7819      	ldrb	r1, [r3, #0]
 8002a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	3334      	adds	r3, #52	; 0x34
 8002a1a:	460a      	mov	r2, r1
 8002a1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	4413      	add	r3, r2
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b09      	cmp	r3, #9
 8002a34:	d9e9      	bls.n	8002a0a <prvInitialiseNewTask+0x64>
 8002a36:	e000      	b.n	8002a3a <prvInitialiseNewTask+0x94>
			{
				break;
 8002a38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a42:	e003      	b.n	8002a4c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d901      	bls.n	8002a56 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a52:	2304      	movs	r3, #4
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a5a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a60:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	2200      	movs	r2, #0
 8002a66:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fa19 	bl	8001ea4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	3318      	adds	r3, #24
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fa14 	bl	8001ea4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	f1c3 0205 	rsb	r2, r3, #5
 8002a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	2200      	movs	r2, #0
 8002a96:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	68f9      	ldr	r1, [r7, #12]
 8002aa4:	69b8      	ldr	r0, [r7, #24]
 8002aa6:	f001 f8d3 	bl	8003c50 <pxPortInitialiseStack>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002abc:	bf00      	nop
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002acc:	f001 f9ea 	bl	8003ea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ad0:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <prvAddNewTaskToReadyList+0xc0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a2b      	ldr	r2, [pc, #172]	; (8002b84 <prvAddNewTaskToReadyList+0xc0>)
 8002ad8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <prvAddNewTaskToReadyList+0xc4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ae2:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <prvAddNewTaskToReadyList+0xc4>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ae8:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <prvAddNewTaskToReadyList+0xc0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d110      	bne.n	8002b12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002af0:	f000 fbf4 	bl	80032dc <prvInitialiseTaskLists>
 8002af4:	e00d      	b.n	8002b12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002af6:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <prvAddNewTaskToReadyList+0xc8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <prvAddNewTaskToReadyList+0xc4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d802      	bhi.n	8002b12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b0c:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <prvAddNewTaskToReadyList+0xc4>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b12:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <prvAddNewTaskToReadyList+0xcc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3301      	adds	r3, #1
 8002b18:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <prvAddNewTaskToReadyList+0xcc>)
 8002b1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <prvAddNewTaskToReadyList+0xcc>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	2201      	movs	r2, #1
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <prvAddNewTaskToReadyList+0xd0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <prvAddNewTaskToReadyList+0xd0>)
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <prvAddNewTaskToReadyList+0xd4>)
 8002b44:	441a      	add	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	f7ff f9b6 	bl	8001ebe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b52:	f001 f9d7 	bl	8003f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <prvAddNewTaskToReadyList+0xc8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00e      	beq.n	8002b7c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <prvAddNewTaskToReadyList+0xc4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d207      	bcs.n	8002b7c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <prvAddNewTaskToReadyList+0xd8>)
 8002b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000104 	.word	0x20000104
 8002b88:	2000002c 	.word	0x2000002c
 8002b8c:	20000110 	.word	0x20000110
 8002b90:	20000120 	.word	0x20000120
 8002b94:	2000010c 	.word	0x2000010c
 8002b98:	20000030 	.word	0x20000030
 8002b9c:	e000ed04 	.word	0xe000ed04

08002ba0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d017      	beq.n	8002be2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002bb2:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <vTaskDelay+0x60>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <vTaskDelay+0x30>
	__asm volatile
 8002bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	60bb      	str	r3, [r7, #8]
}
 8002bcc:	bf00      	nop
 8002bce:	e7fe      	b.n	8002bce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002bd0:	f000 f868 	bl	8002ca4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fcc2 	bl	8003560 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002bdc:	f000 f870 	bl	8002cc0 <xTaskResumeAll>
 8002be0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d107      	bne.n	8002bf8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <vTaskDelay+0x64>)
 8002bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	2000012c 	.word	0x2000012c
 8002c04:	e000ed04 	.word	0xe000ed04

08002c08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <vTaskStartScheduler+0x84>)
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	2300      	movs	r3, #0
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	2300      	movs	r3, #0
 8002c18:	2282      	movs	r2, #130	; 0x82
 8002c1a:	491d      	ldr	r1, [pc, #116]	; (8002c90 <vTaskStartScheduler+0x88>)
 8002c1c:	481d      	ldr	r0, [pc, #116]	; (8002c94 <vTaskStartScheduler+0x8c>)
 8002c1e:	f7ff fe81 	bl	8002924 <xTaskCreate>
 8002c22:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d102      	bne.n	8002c30 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8002c2a:	f000 fcff 	bl	800362c <xTimerCreateTimerTask>
 8002c2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d116      	bne.n	8002c64 <vTaskStartScheduler+0x5c>
	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	60bb      	str	r3, [r7, #8]
}
 8002c48:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c4a:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <vTaskStartScheduler+0x90>)
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <vTaskStartScheduler+0x94>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <vTaskStartScheduler+0x98>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c5e:	f001 f87f 	bl	8003d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002c62:	e00e      	b.n	8002c82 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6a:	d10a      	bne.n	8002c82 <vTaskStartScheduler+0x7a>
	__asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	607b      	str	r3, [r7, #4]
}
 8002c7e:	bf00      	nop
 8002c80:	e7fe      	b.n	8002c80 <vTaskStartScheduler+0x78>
}
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000128 	.word	0x20000128
 8002c90:	08004534 	.word	0x08004534
 8002c94:	080032ad 	.word	0x080032ad
 8002c98:	20000124 	.word	0x20000124
 8002c9c:	20000110 	.word	0x20000110
 8002ca0:	20000108 	.word	0x20000108

08002ca4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <vTaskSuspendAll+0x18>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	4a03      	ldr	r2, [pc, #12]	; (8002cbc <vTaskSuspendAll+0x18>)
 8002cb0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	2000012c 	.word	0x2000012c

08002cc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <xTaskResumeAll+0x114>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10a      	bne.n	8002cec <xTaskResumeAll+0x2c>
	__asm volatile
 8002cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cda:	f383 8811 	msr	BASEPRI, r3
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	f3bf 8f4f 	dsb	sy
 8002ce6:	603b      	str	r3, [r7, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	e7fe      	b.n	8002cea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002cec:	f001 f8da 	bl	8003ea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002cf0:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <xTaskResumeAll+0x114>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	4a37      	ldr	r2, [pc, #220]	; (8002dd4 <xTaskResumeAll+0x114>)
 8002cf8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cfa:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <xTaskResumeAll+0x114>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d161      	bne.n	8002dc6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d02:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <xTaskResumeAll+0x118>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d05d      	beq.n	8002dc6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d0a:	e02e      	b.n	8002d6a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d0c:	4b33      	ldr	r3, [pc, #204]	; (8002ddc <xTaskResumeAll+0x11c>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3318      	adds	r3, #24
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff f92d 	bl	8001f78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3304      	adds	r3, #4
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff f928 	bl	8001f78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <xTaskResumeAll+0x120>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	4a2a      	ldr	r2, [pc, #168]	; (8002de0 <xTaskResumeAll+0x120>)
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4a27      	ldr	r2, [pc, #156]	; (8002de4 <xTaskResumeAll+0x124>)
 8002d48:	441a      	add	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f7ff f8b4 	bl	8001ebe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5a:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <xTaskResumeAll+0x128>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d302      	bcc.n	8002d6a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002d64:	4b21      	ldr	r3, [pc, #132]	; (8002dec <xTaskResumeAll+0x12c>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <xTaskResumeAll+0x11c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1cc      	bne.n	8002d0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002d78:	f000 fb2e 	bl	80033d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <xTaskResumeAll+0x130>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002d88:	f000 f846 	bl	8002e18 <xTaskIncrementTick>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <xTaskResumeAll+0x12c>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f1      	bne.n	8002d88 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <xTaskResumeAll+0x130>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <xTaskResumeAll+0x12c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002db2:	2301      	movs	r3, #1
 8002db4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <xTaskResumeAll+0x134>)
 8002db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002dc6:	f001 f89d 	bl	8003f04 <vPortExitCritical>

	return xAlreadyYielded;
 8002dca:	68bb      	ldr	r3, [r7, #8]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	2000012c 	.word	0x2000012c
 8002dd8:	20000104 	.word	0x20000104
 8002ddc:	200000c4 	.word	0x200000c4
 8002de0:	2000010c 	.word	0x2000010c
 8002de4:	20000030 	.word	0x20000030
 8002de8:	2000002c 	.word	0x2000002c
 8002dec:	20000118 	.word	0x20000118
 8002df0:	20000114 	.word	0x20000114
 8002df4:	e000ed04 	.word	0xe000ed04

08002df8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <xTaskGetTickCount+0x1c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002e04:	687b      	ldr	r3, [r7, #4]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000108 	.word	0x20000108

08002e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e22:	4b4e      	ldr	r3, [pc, #312]	; (8002f5c <xTaskIncrementTick+0x144>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 8088 	bne.w	8002f3c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e2c:	4b4c      	ldr	r3, [pc, #304]	; (8002f60 <xTaskIncrementTick+0x148>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e34:	4a4a      	ldr	r2, [pc, #296]	; (8002f60 <xTaskIncrementTick+0x148>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d120      	bne.n	8002e82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e40:	4b48      	ldr	r3, [pc, #288]	; (8002f64 <xTaskIncrementTick+0x14c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <xTaskIncrementTick+0x48>
	__asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	603b      	str	r3, [r7, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	e7fe      	b.n	8002e5e <xTaskIncrementTick+0x46>
 8002e60:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <xTaskIncrementTick+0x14c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <xTaskIncrementTick+0x150>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a3e      	ldr	r2, [pc, #248]	; (8002f64 <xTaskIncrementTick+0x14c>)
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4a3e      	ldr	r2, [pc, #248]	; (8002f68 <xTaskIncrementTick+0x150>)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <xTaskIncrementTick+0x154>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	4a3c      	ldr	r2, [pc, #240]	; (8002f6c <xTaskIncrementTick+0x154>)
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	f000 faab 	bl	80033d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e82:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <xTaskIncrementTick+0x158>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d348      	bcc.n	8002f1e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e8c:	4b35      	ldr	r3, [pc, #212]	; (8002f64 <xTaskIncrementTick+0x14c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d104      	bne.n	8002ea0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e96:	4b36      	ldr	r3, [pc, #216]	; (8002f70 <xTaskIncrementTick+0x158>)
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9c:	601a      	str	r2, [r3, #0]
					break;
 8002e9e:	e03e      	b.n	8002f1e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ea0:	4b30      	ldr	r3, [pc, #192]	; (8002f64 <xTaskIncrementTick+0x14c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d203      	bcs.n	8002ec0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002eb8:	4a2d      	ldr	r2, [pc, #180]	; (8002f70 <xTaskIncrementTick+0x158>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ebe:	e02e      	b.n	8002f1e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff f857 	bl	8001f78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	3318      	adds	r3, #24
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff f84e 	bl	8001f78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <xTaskIncrementTick+0x15c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <xTaskIncrementTick+0x15c>)
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <xTaskIncrementTick+0x160>)
 8002efc:	441a      	add	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	3304      	adds	r3, #4
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f7fe ffda 	bl	8001ebe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <xTaskIncrementTick+0x164>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d3b9      	bcc.n	8002e8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f1c:	e7b6      	b.n	8002e8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f1e:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <xTaskIncrementTick+0x164>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f24:	4914      	ldr	r1, [pc, #80]	; (8002f78 <xTaskIncrementTick+0x160>)
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d907      	bls.n	8002f46 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8002f36:	2301      	movs	r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e004      	b.n	8002f46 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002f3c:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <xTaskIncrementTick+0x168>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <xTaskIncrementTick+0x168>)
 8002f44:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002f46:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <xTaskIncrementTick+0x16c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002f52:	697b      	ldr	r3, [r7, #20]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	2000012c 	.word	0x2000012c
 8002f60:	20000108 	.word	0x20000108
 8002f64:	200000bc 	.word	0x200000bc
 8002f68:	200000c0 	.word	0x200000c0
 8002f6c:	2000011c 	.word	0x2000011c
 8002f70:	20000124 	.word	0x20000124
 8002f74:	2000010c 	.word	0x2000010c
 8002f78:	20000030 	.word	0x20000030
 8002f7c:	2000002c 	.word	0x2000002c
 8002f80:	20000114 	.word	0x20000114
 8002f84:	20000118 	.word	0x20000118

08002f88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f8e:	4b27      	ldr	r3, [pc, #156]	; (800302c <vTaskSwitchContext+0xa4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002f96:	4b26      	ldr	r3, [pc, #152]	; (8003030 <vTaskSwitchContext+0xa8>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002f9c:	e03f      	b.n	800301e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002f9e:	4b24      	ldr	r3, [pc, #144]	; (8003030 <vTaskSwitchContext+0xa8>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fa4:	4b23      	ldr	r3, [pc, #140]	; (8003034 <vTaskSwitchContext+0xac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002fb2:	7afb      	ldrb	r3, [r7, #11]
 8002fb4:	f1c3 031f 	rsb	r3, r3, #31
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	491f      	ldr	r1, [pc, #124]	; (8003038 <vTaskSwitchContext+0xb0>)
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10a      	bne.n	8002fe4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd2:	f383 8811 	msr	BASEPRI, r3
 8002fd6:	f3bf 8f6f 	isb	sy
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	607b      	str	r3, [r7, #4]
}
 8002fe0:	bf00      	nop
 8002fe2:	e7fe      	b.n	8002fe2 <vTaskSwitchContext+0x5a>
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <vTaskSwitchContext+0xb0>)
 8002ff0:	4413      	add	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	3308      	adds	r3, #8
 8003006:	429a      	cmp	r2, r3
 8003008:	d104      	bne.n	8003014 <vTaskSwitchContext+0x8c>
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	4a08      	ldr	r2, [pc, #32]	; (800303c <vTaskSwitchContext+0xb4>)
 800301c:	6013      	str	r3, [r2, #0]
}
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	2000012c 	.word	0x2000012c
 8003030:	20000118 	.word	0x20000118
 8003034:	2000010c 	.word	0x2000010c
 8003038:	20000030 	.word	0x20000030
 800303c:	2000002c 	.word	0x2000002c

08003040 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	60fb      	str	r3, [r7, #12]
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <vTaskPlaceOnEventList+0x44>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3318      	adds	r3, #24
 800306c:	4619      	mov	r1, r3
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fe ff49 	bl	8001f06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003074:	2101      	movs	r1, #1
 8003076:	6838      	ldr	r0, [r7, #0]
 8003078:	f000 fa72 	bl	8003560 <prvAddCurrentTaskToDelayedList>
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	2000002c 	.word	0x2000002c

08003088 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	617b      	str	r3, [r7, #20]
}
 80030ac:	bf00      	nop
 80030ae:	e7fe      	b.n	80030ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <vTaskPlaceOnEventListRestricted+0x54>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3318      	adds	r3, #24
 80030b6:	4619      	mov	r1, r3
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7fe ff00 	bl	8001ebe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
 80030c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	68b8      	ldr	r0, [r7, #8]
 80030ce:	f000 fa47 	bl	8003560 <prvAddCurrentTaskToDelayedList>
	}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2000002c 	.word	0x2000002c

080030e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80030f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	60fb      	str	r3, [r7, #12]
}
 8003108:	bf00      	nop
 800310a:	e7fe      	b.n	800310a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	3318      	adds	r3, #24
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe ff31 	bl	8001f78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <xTaskRemoveFromEventList+0xac>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d11c      	bne.n	8003158 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	3304      	adds	r3, #4
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe ff28 	bl	8001f78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <xTaskRemoveFromEventList+0xb0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4313      	orrs	r3, r2
 8003136:	4a16      	ldr	r2, [pc, #88]	; (8003190 <xTaskRemoveFromEventList+0xb0>)
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4a13      	ldr	r2, [pc, #76]	; (8003194 <xTaskRemoveFromEventList+0xb4>)
 8003148:	441a      	add	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	3304      	adds	r3, #4
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f7fe feb4 	bl	8001ebe <vListInsertEnd>
 8003156:	e005      	b.n	8003164 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	3318      	adds	r3, #24
 800315c:	4619      	mov	r1, r3
 800315e:	480e      	ldr	r0, [pc, #56]	; (8003198 <xTaskRemoveFromEventList+0xb8>)
 8003160:	f7fe fead 	bl	8001ebe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <xTaskRemoveFromEventList+0xbc>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	429a      	cmp	r2, r3
 8003170:	d905      	bls.n	800317e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003172:	2301      	movs	r3, #1
 8003174:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <xTaskRemoveFromEventList+0xc0>)
 8003178:	2201      	movs	r2, #1
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e001      	b.n	8003182 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003182:	697b      	ldr	r3, [r7, #20]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	2000012c 	.word	0x2000012c
 8003190:	2000010c 	.word	0x2000010c
 8003194:	20000030 	.word	0x20000030
 8003198:	200000c4 	.word	0x200000c4
 800319c:	2000002c 	.word	0x2000002c
 80031a0:	20000118 	.word	0x20000118

080031a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <vTaskInternalSetTimeOutState+0x24>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <vTaskInternalSetTimeOutState+0x28>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	605a      	str	r2, [r3, #4]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	2000011c 	.word	0x2000011c
 80031cc:	20000108 	.word	0x20000108

080031d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	613b      	str	r3, [r7, #16]
}
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	60fb      	str	r3, [r7, #12]
}
 800320e:	bf00      	nop
 8003210:	e7fe      	b.n	8003210 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003212:	f000 fe47 	bl	8003ea4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <xTaskCheckForTimeOut+0xbc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322e:	d102      	bne.n	8003236 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	e023      	b.n	800327e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b15      	ldr	r3, [pc, #84]	; (8003290 <xTaskCheckForTimeOut+0xc0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d007      	beq.n	8003252 <xTaskCheckForTimeOut+0x82>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	429a      	cmp	r2, r3
 800324a:	d302      	bcc.n	8003252 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800324c:	2301      	movs	r3, #1
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	e015      	b.n	800327e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	429a      	cmp	r2, r3
 800325a:	d20b      	bcs.n	8003274 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	1ad2      	subs	r2, r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff9b 	bl	80031a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	e004      	b.n	800327e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800327a:	2301      	movs	r3, #1
 800327c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800327e:	f000 fe41 	bl	8003f04 <vPortExitCritical>

	return xReturn;
 8003282:	69fb      	ldr	r3, [r7, #28]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3720      	adds	r7, #32
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000108 	.word	0x20000108
 8003290:	2000011c 	.word	0x2000011c

08003294 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <vTaskMissedYield+0x14>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]
}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	20000118 	.word	0x20000118

080032ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032b4:	f000 f852 	bl	800335c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <prvIdleTask+0x28>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d9f9      	bls.n	80032b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <prvIdleTask+0x2c>)
 80032c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032d0:	e7f0      	b.n	80032b4 <prvIdleTask+0x8>
 80032d2:	bf00      	nop
 80032d4:	20000030 	.word	0x20000030
 80032d8:	e000ed04 	.word	0xe000ed04

080032dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	e00c      	b.n	8003302 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4a12      	ldr	r2, [pc, #72]	; (800333c <prvInitialiseTaskLists+0x60>)
 80032f4:	4413      	add	r3, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe fdb4 	bl	8001e64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3301      	adds	r3, #1
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b04      	cmp	r3, #4
 8003306:	d9ef      	bls.n	80032e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003308:	480d      	ldr	r0, [pc, #52]	; (8003340 <prvInitialiseTaskLists+0x64>)
 800330a:	f7fe fdab 	bl	8001e64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800330e:	480d      	ldr	r0, [pc, #52]	; (8003344 <prvInitialiseTaskLists+0x68>)
 8003310:	f7fe fda8 	bl	8001e64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003314:	480c      	ldr	r0, [pc, #48]	; (8003348 <prvInitialiseTaskLists+0x6c>)
 8003316:	f7fe fda5 	bl	8001e64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800331a:	480c      	ldr	r0, [pc, #48]	; (800334c <prvInitialiseTaskLists+0x70>)
 800331c:	f7fe fda2 	bl	8001e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003320:	480b      	ldr	r0, [pc, #44]	; (8003350 <prvInitialiseTaskLists+0x74>)
 8003322:	f7fe fd9f 	bl	8001e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <prvInitialiseTaskLists+0x78>)
 8003328:	4a05      	ldr	r2, [pc, #20]	; (8003340 <prvInitialiseTaskLists+0x64>)
 800332a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800332c:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <prvInitialiseTaskLists+0x7c>)
 800332e:	4a05      	ldr	r2, [pc, #20]	; (8003344 <prvInitialiseTaskLists+0x68>)
 8003330:	601a      	str	r2, [r3, #0]
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000030 	.word	0x20000030
 8003340:	20000094 	.word	0x20000094
 8003344:	200000a8 	.word	0x200000a8
 8003348:	200000c4 	.word	0x200000c4
 800334c:	200000d8 	.word	0x200000d8
 8003350:	200000f0 	.word	0x200000f0
 8003354:	200000bc 	.word	0x200000bc
 8003358:	200000c0 	.word	0x200000c0

0800335c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003362:	e019      	b.n	8003398 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003364:	f000 fd9e 	bl	8003ea4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003368:	4b10      	ldr	r3, [pc, #64]	; (80033ac <prvCheckTasksWaitingTermination+0x50>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fdff 	bl	8001f78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <prvCheckTasksWaitingTermination+0x54>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3b01      	subs	r3, #1
 8003380:	4a0b      	ldr	r2, [pc, #44]	; (80033b0 <prvCheckTasksWaitingTermination+0x54>)
 8003382:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <prvCheckTasksWaitingTermination+0x58>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3b01      	subs	r3, #1
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <prvCheckTasksWaitingTermination+0x58>)
 800338c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800338e:	f000 fdb9 	bl	8003f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f810 	bl	80033b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <prvCheckTasksWaitingTermination+0x58>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e1      	bne.n	8003364 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200000d8 	.word	0x200000d8
 80033b0:	20000104 	.word	0x20000104
 80033b4:	200000ec 	.word	0x200000ec

080033b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 ff53 	bl	8004270 <vPortFree>
			vPortFree( pxTCB );
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 ff50 	bl	8004270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033de:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <prvResetNextTaskUnblockTime+0x38>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d104      	bne.n	80033f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <prvResetNextTaskUnblockTime+0x3c>)
 80033ea:	f04f 32ff 	mov.w	r2, #4294967295
 80033ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80033f0:	e008      	b.n	8003404 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033f2:	4b07      	ldr	r3, [pc, #28]	; (8003410 <prvResetNextTaskUnblockTime+0x38>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a04      	ldr	r2, [pc, #16]	; (8003414 <prvResetNextTaskUnblockTime+0x3c>)
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	200000bc 	.word	0x200000bc
 8003414:	20000124 	.word	0x20000124

08003418 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <xTaskGetSchedulerState+0x34>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003426:	2301      	movs	r3, #1
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	e008      	b.n	800343e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800342c:	4b08      	ldr	r3, [pc, #32]	; (8003450 <xTaskGetSchedulerState+0x38>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003434:	2302      	movs	r3, #2
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	e001      	b.n	800343e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800343a:	2300      	movs	r3, #0
 800343c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800343e:	687b      	ldr	r3, [r7, #4]
	}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	20000110 	.word	0x20000110
 8003450:	2000012c 	.word	0x2000012c

08003454 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d06e      	beq.n	8003548 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800346a:	4b3a      	ldr	r3, [pc, #232]	; (8003554 <xTaskPriorityDisinherit+0x100>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	429a      	cmp	r2, r3
 8003472:	d00a      	beq.n	800348a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	60fb      	str	r3, [r7, #12]
}
 8003486:	bf00      	nop
 8003488:	e7fe      	b.n	8003488 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10a      	bne.n	80034a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	60bb      	str	r3, [r7, #8]
}
 80034a4:	bf00      	nop
 80034a6:	e7fe      	b.n	80034a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ac:	1e5a      	subs	r2, r3, #1
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d044      	beq.n	8003548 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d140      	bne.n	8003548 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	3304      	adds	r3, #4
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fd54 	bl	8001f78 <uxListRemove>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d115      	bne.n	8003502 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	491f      	ldr	r1, [pc, #124]	; (8003558 <xTaskPriorityDisinherit+0x104>)
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <xTaskPriorityDisinherit+0xae>
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	2201      	movs	r2, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43da      	mvns	r2, r3
 80034f8:	4b18      	ldr	r3, [pc, #96]	; (800355c <xTaskPriorityDisinherit+0x108>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4013      	ands	r3, r2
 80034fe:	4a17      	ldr	r2, [pc, #92]	; (800355c <xTaskPriorityDisinherit+0x108>)
 8003500:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	f1c3 0205 	rsb	r2, r3, #5
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	2201      	movs	r2, #1
 800351c:	409a      	lsls	r2, r3
 800351e:	4b0f      	ldr	r3, [pc, #60]	; (800355c <xTaskPriorityDisinherit+0x108>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	4a0d      	ldr	r2, [pc, #52]	; (800355c <xTaskPriorityDisinherit+0x108>)
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4a08      	ldr	r2, [pc, #32]	; (8003558 <xTaskPriorityDisinherit+0x104>)
 8003536:	441a      	add	r2, r3
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	3304      	adds	r3, #4
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f7fe fcbd 	bl	8001ebe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003544:	2301      	movs	r3, #1
 8003546:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003548:	697b      	ldr	r3, [r7, #20]
	}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	2000002c 	.word	0x2000002c
 8003558:	20000030 	.word	0x20000030
 800355c:	2000010c 	.word	0x2000010c

08003560 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800356a:	4b29      	ldr	r3, [pc, #164]	; (8003610 <prvAddCurrentTaskToDelayedList+0xb0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003570:	4b28      	ldr	r3, [pc, #160]	; (8003614 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3304      	adds	r3, #4
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe fcfe 	bl	8001f78 <uxListRemove>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10b      	bne.n	800359a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	2201      	movs	r2, #1
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43da      	mvns	r2, r3
 8003590:	4b21      	ldr	r3, [pc, #132]	; (8003618 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4013      	ands	r3, r2
 8003596:	4a20      	ldr	r2, [pc, #128]	; (8003618 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003598:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d10a      	bne.n	80035b8 <prvAddCurrentTaskToDelayedList+0x58>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035a8:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3304      	adds	r3, #4
 80035ae:	4619      	mov	r1, r3
 80035b0:	481a      	ldr	r0, [pc, #104]	; (800361c <prvAddCurrentTaskToDelayedList+0xbc>)
 80035b2:	f7fe fc84 	bl	8001ebe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035b6:	e026      	b.n	8003606 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d209      	bcs.n	80035e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035d0:	4b13      	ldr	r3, [pc, #76]	; (8003620 <prvAddCurrentTaskToDelayedList+0xc0>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3304      	adds	r3, #4
 80035da:	4619      	mov	r1, r3
 80035dc:	4610      	mov	r0, r2
 80035de:	f7fe fc92 	bl	8001f06 <vListInsert>
}
 80035e2:	e010      	b.n	8003606 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <prvAddCurrentTaskToDelayedList+0xc4>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3304      	adds	r3, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f7fe fc88 	bl	8001f06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035f6:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d202      	bcs.n	8003606 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003600:	4a09      	ldr	r2, [pc, #36]	; (8003628 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	6013      	str	r3, [r2, #0]
}
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000108 	.word	0x20000108
 8003614:	2000002c 	.word	0x2000002c
 8003618:	2000010c 	.word	0x2000010c
 800361c:	200000f0 	.word	0x200000f0
 8003620:	200000c0 	.word	0x200000c0
 8003624:	200000bc 	.word	0x200000bc
 8003628:	20000124 	.word	0x20000124

0800362c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003636:	f000 fad5 	bl	8003be4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <xTimerCreateTimerTask+0x54>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <xTimerCreateTimerTask+0x58>)
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	2302      	movs	r3, #2
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	2300      	movs	r3, #0
 800364c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003650:	490d      	ldr	r1, [pc, #52]	; (8003688 <xTimerCreateTimerTask+0x5c>)
 8003652:	480e      	ldr	r0, [pc, #56]	; (800368c <xTimerCreateTimerTask+0x60>)
 8003654:	f7ff f966 	bl	8002924 <xTaskCreate>
 8003658:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	603b      	str	r3, [r7, #0]
}
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8003676:	687b      	ldr	r3, [r7, #4]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20000160 	.word	0x20000160
 8003684:	20000164 	.word	0x20000164
 8003688:	0800453c 	.word	0x0800453c
 800368c:	080037c5 	.word	0x080037c5

08003690 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	; 0x28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <xTimerGenericCommand+0x2e>
	__asm volatile
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	623b      	str	r3, [r7, #32]
}
 80036ba:	bf00      	nop
 80036bc:	e7fe      	b.n	80036bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80036be:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <xTimerGenericCommand+0x98>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d02a      	beq.n	800371c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b05      	cmp	r3, #5
 80036d6:	dc18      	bgt.n	800370a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80036d8:	f7ff fe9e 	bl	8003418 <xTaskGetSchedulerState>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d109      	bne.n	80036f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80036e2:	4b11      	ldr	r3, [pc, #68]	; (8003728 <xTimerGenericCommand+0x98>)
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	f107 0114 	add.w	r1, r7, #20
 80036ea:	2300      	movs	r3, #0
 80036ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ee:	f7fe fd35 	bl	800215c <xQueueGenericSend>
 80036f2:	6278      	str	r0, [r7, #36]	; 0x24
 80036f4:	e012      	b.n	800371c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80036f6:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <xTimerGenericCommand+0x98>)
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	f107 0114 	add.w	r1, r7, #20
 80036fe:	2300      	movs	r3, #0
 8003700:	2200      	movs	r2, #0
 8003702:	f7fe fd2b 	bl	800215c <xQueueGenericSend>
 8003706:	6278      	str	r0, [r7, #36]	; 0x24
 8003708:	e008      	b.n	800371c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <xTimerGenericCommand+0x98>)
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	f107 0114 	add.w	r1, r7, #20
 8003712:	2300      	movs	r3, #0
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	f7fe fe1f 	bl	8002358 <xQueueGenericSendFromISR>
 800371a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800371e:	4618      	mov	r0, r3
 8003720:	3728      	adds	r7, #40	; 0x28
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000160 	.word	0x20000160

0800372c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af02      	add	r7, sp, #8
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <prvProcessExpiredTimer+0x94>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	3304      	adds	r3, #4
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe fc17 	bl	8001f78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d022      	beq.n	800379e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	699a      	ldr	r2, [r3, #24]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	18d1      	adds	r1, r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	6978      	ldr	r0, [r7, #20]
 8003766:	f000 f8d1 	bl	800390c <prvInsertTimerInActiveList>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01f      	beq.n	80037b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003770:	2300      	movs	r3, #0
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	2300      	movs	r3, #0
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	2100      	movs	r1, #0
 800377a:	6978      	ldr	r0, [r7, #20]
 800377c:	f7ff ff88 	bl	8003690 <xTimerGenericCommand>
 8003780:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d113      	bne.n	80037b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	60fb      	str	r3, [r7, #12]
}
 800379a:	bf00      	nop
 800379c:	e7fe      	b.n	800379c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	6978      	ldr	r0, [r7, #20]
 80037b6:	4798      	blx	r3
}
 80037b8:	bf00      	nop
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000158 	.word	0x20000158

080037c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037cc:	f107 0308 	add.w	r3, r7, #8
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 f857 	bl	8003884 <prvGetNextExpireTime>
 80037d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4619      	mov	r1, r3
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f803 	bl	80037e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80037e2:	f000 f8d5 	bl	8003990 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037e6:	e7f1      	b.n	80037cc <prvTimerTask+0x8>

080037e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80037f2:	f7ff fa57 	bl	8002ca4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f866 	bl	80038cc <prvSampleTimeNow>
 8003800:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d130      	bne.n	800386a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <prvProcessTimerOrBlockTask+0x3c>
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	429a      	cmp	r2, r3
 8003814:	d806      	bhi.n	8003824 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003816:	f7ff fa53 	bl	8002cc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff85 	bl	800372c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003822:	e024      	b.n	800386e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <prvProcessTimerOrBlockTask+0x90>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <prvProcessTimerOrBlockTask+0x50>
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <prvProcessTimerOrBlockTask+0x52>
 8003838:	2300      	movs	r3, #0
 800383a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <prvProcessTimerOrBlockTask+0x94>)
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	4619      	mov	r1, r3
 800384a:	f7ff f837 	bl	80028bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800384e:	f7ff fa37 	bl	8002cc0 <xTaskResumeAll>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <prvProcessTimerOrBlockTask+0x98>)
 800385a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	f3bf 8f6f 	isb	sy
}
 8003868:	e001      	b.n	800386e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800386a:	f7ff fa29 	bl	8002cc0 <xTaskResumeAll>
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	2000015c 	.word	0x2000015c
 800387c:	20000160 	.word	0x20000160
 8003880:	e000ed04 	.word	0xe000ed04

08003884 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800388c:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <prvGetNextExpireTime+0x44>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <prvGetNextExpireTime+0x16>
 8003896:	2201      	movs	r2, #1
 8003898:	e000      	b.n	800389c <prvGetNextExpireTime+0x18>
 800389a:	2200      	movs	r2, #0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d105      	bne.n	80038b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038a8:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <prvGetNextExpireTime+0x44>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	e001      	b.n	80038b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80038b8:	68fb      	ldr	r3, [r7, #12]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000158 	.word	0x20000158

080038cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80038d4:	f7ff fa90 	bl	8002df8 <xTaskGetTickCount>
 80038d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80038da:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <prvSampleTimeNow+0x3c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d205      	bcs.n	80038f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80038e4:	f000 f91a 	bl	8003b1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e002      	b.n	80038f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80038f6:	4a04      	ldr	r2, [pc, #16]	; (8003908 <prvSampleTimeNow+0x3c>)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80038fc:	68fb      	ldr	r3, [r7, #12]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000168 	.word	0x20000168

0800390c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	429a      	cmp	r2, r3
 8003930:	d812      	bhi.n	8003958 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	1ad2      	subs	r2, r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003940:	2301      	movs	r3, #1
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	e01b      	b.n	800397e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003946:	4b10      	ldr	r3, [pc, #64]	; (8003988 <prvInsertTimerInActiveList+0x7c>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3304      	adds	r3, #4
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fe fad8 	bl	8001f06 <vListInsert>
 8003956:	e012      	b.n	800397e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d206      	bcs.n	800396e <prvInsertTimerInActiveList+0x62>
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d302      	bcc.n	800396e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003968:	2301      	movs	r3, #1
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	e007      	b.n	800397e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <prvInsertTimerInActiveList+0x80>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f7fe fac4 	bl	8001f06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800397e:	697b      	ldr	r3, [r7, #20]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	2000015c 	.word	0x2000015c
 800398c:	20000158 	.word	0x20000158

08003990 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08c      	sub	sp, #48	; 0x30
 8003994:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003996:	e0ae      	b.n	8003af6 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f2c0 80aa 	blt.w	8003af4 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d004      	beq.n	80039b6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	3304      	adds	r3, #4
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fae1 	bl	8001f78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff87 	bl	80038cc <prvSampleTimeNow>
 80039be:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b09      	cmp	r3, #9
 80039c4:	f200 8097 	bhi.w	8003af6 <prvProcessReceivedCommands+0x166>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <prvProcessReceivedCommands+0x40>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039f9 	.word	0x080039f9
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	080039f9 	.word	0x080039f9
 80039dc:	08003a6d 	.word	0x08003a6d
 80039e0:	08003a81 	.word	0x08003a81
 80039e4:	08003acb 	.word	0x08003acb
 80039e8:	080039f9 	.word	0x080039f9
 80039ec:	080039f9 	.word	0x080039f9
 80039f0:	08003a6d 	.word	0x08003a6d
 80039f4:	08003a81 	.word	0x08003a81
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	18d1      	adds	r1, r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a3a      	ldr	r2, [r7, #32]
 8003a16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a18:	f7ff ff78 	bl	800390c <prvInsertTimerInActiveList>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d069      	beq.n	8003af6 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d05e      	beq.n	8003af6 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	441a      	add	r2, r3
 8003a40:	2300      	movs	r3, #0
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2300      	movs	r3, #0
 8003a46:	2100      	movs	r1, #0
 8003a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a4a:	f7ff fe21 	bl	8003690 <xTimerGenericCommand>
 8003a4e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d14f      	bne.n	8003af6 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	61bb      	str	r3, [r7, #24]
}
 8003a68:	bf00      	nop
 8003a6a:	e7fe      	b.n	8003a6a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003a7e:	e03a      	b.n	8003af6 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	617b      	str	r3, [r7, #20]
}
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	18d1      	adds	r1, r2, r3
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ac4:	f7ff ff22 	bl	800390c <prvInsertTimerInActiveList>
					break;
 8003ac8:	e015      	b.n	8003af6 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d103      	bne.n	8003ae0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8003ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ada:	f000 fbc9 	bl	8004270 <vPortFree>
 8003ade:	e00a      	b.n	8003af6 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003af2:	e000      	b.n	8003af6 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003af4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003af6:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <prvProcessReceivedCommands+0x188>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f107 0108 	add.w	r1, r7, #8
 8003afe:	2200      	movs	r2, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe fcc1 	bl	8002488 <xQueueReceive>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f47f af45 	bne.w	8003998 <prvProcessReceivedCommands+0x8>
	}
}
 8003b0e:	bf00      	nop
 8003b10:	bf00      	nop
 8003b12:	3728      	adds	r7, #40	; 0x28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000160 	.word	0x20000160

08003b1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b22:	e048      	b.n	8003bb6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b24:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <prvSwitchTimerLists+0xc0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b2e:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <prvSwitchTimerLists+0xc0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe fa1b 	bl	8001f78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02e      	beq.n	8003bb6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4413      	add	r3, r2
 8003b60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d90e      	bls.n	8003b88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b76:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <prvSwitchTimerLists+0xc0>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4610      	mov	r0, r2
 8003b82:	f7fe f9c0 	bl	8001f06 <vListInsert>
 8003b86:	e016      	b.n	8003bb6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	2100      	movs	r1, #0
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f7ff fd7c 	bl	8003690 <xTimerGenericCommand>
 8003b98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	603b      	str	r3, [r7, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	e7fe      	b.n	8003bb4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003bb6:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <prvSwitchTimerLists+0xc0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1b1      	bne.n	8003b24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <prvSwitchTimerLists+0xc0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <prvSwitchTimerLists+0xc4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <prvSwitchTimerLists+0xc0>)
 8003bcc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003bce:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <prvSwitchTimerLists+0xc4>)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	6013      	str	r3, [r2, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000158 	.word	0x20000158
 8003be0:	2000015c 	.word	0x2000015c

08003be4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003be8:	f000 f95c 	bl	8003ea4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003bec:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <prvCheckForValidListAndQueue+0x54>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d11d      	bne.n	8003c30 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003bf4:	4811      	ldr	r0, [pc, #68]	; (8003c3c <prvCheckForValidListAndQueue+0x58>)
 8003bf6:	f7fe f935 	bl	8001e64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003bfa:	4811      	ldr	r0, [pc, #68]	; (8003c40 <prvCheckForValidListAndQueue+0x5c>)
 8003bfc:	f7fe f932 	bl	8001e64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003c00:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <prvCheckForValidListAndQueue+0x60>)
 8003c02:	4a0e      	ldr	r2, [pc, #56]	; (8003c3c <prvCheckForValidListAndQueue+0x58>)
 8003c04:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <prvCheckForValidListAndQueue+0x64>)
 8003c08:	4a0d      	ldr	r2, [pc, #52]	; (8003c40 <prvCheckForValidListAndQueue+0x5c>)
 8003c0a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	210c      	movs	r1, #12
 8003c10:	200a      	movs	r0, #10
 8003c12:	f7fe fa43 	bl	800209c <xQueueGenericCreate>
 8003c16:	4603      	mov	r3, r0
 8003c18:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <prvCheckForValidListAndQueue+0x54>)
 8003c1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <prvCheckForValidListAndQueue+0x54>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <prvCheckForValidListAndQueue+0x54>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4908      	ldr	r1, [pc, #32]	; (8003c4c <prvCheckForValidListAndQueue+0x68>)
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe fe1c 	bl	8002868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c30:	f000 f968 	bl	8003f04 <vPortExitCritical>
}
 8003c34:	bf00      	nop
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000160 	.word	0x20000160
 8003c3c:	20000130 	.word	0x20000130
 8003c40:	20000144 	.word	0x20000144
 8003c44:	20000158 	.word	0x20000158
 8003c48:	2000015c 	.word	0x2000015c
 8003c4c:	08004544 	.word	0x08004544

08003c50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3b04      	subs	r3, #4
 8003c60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3b04      	subs	r3, #4
 8003c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f023 0201 	bic.w	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3b04      	subs	r3, #4
 8003c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c80:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <pxPortInitialiseStack+0x64>)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3b14      	subs	r3, #20
 8003c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3b04      	subs	r3, #4
 8003c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f06f 0202 	mvn.w	r2, #2
 8003c9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3b20      	subs	r3, #32
 8003ca4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	08003cb9 	.word	0x08003cb9

08003cb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <prvTaskExitError+0x54>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cca:	d00a      	beq.n	8003ce2 <prvTaskExitError+0x2a>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	60fb      	str	r3, [r7, #12]
}
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <prvTaskExitError+0x28>
	__asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	60bb      	str	r3, [r7, #8]
}
 8003cf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cf6:	bf00      	nop
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0fc      	beq.n	8003cf8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	2000000c 	.word	0x2000000c

08003d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d10:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <pxCurrentTCBConst2>)
 8003d12:	6819      	ldr	r1, [r3, #0]
 8003d14:	6808      	ldr	r0, [r1, #0]
 8003d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d1a:	f380 8809 	msr	PSP, r0
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f04f 0000 	mov.w	r0, #0
 8003d26:	f380 8811 	msr	BASEPRI, r0
 8003d2a:	4770      	bx	lr
 8003d2c:	f3af 8000 	nop.w

08003d30 <pxCurrentTCBConst2>:
 8003d30:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop

08003d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d38:	4808      	ldr	r0, [pc, #32]	; (8003d5c <prvPortStartFirstTask+0x24>)
 8003d3a:	6800      	ldr	r0, [r0, #0]
 8003d3c:	6800      	ldr	r0, [r0, #0]
 8003d3e:	f380 8808 	msr	MSP, r0
 8003d42:	f04f 0000 	mov.w	r0, #0
 8003d46:	f380 8814 	msr	CONTROL, r0
 8003d4a:	b662      	cpsie	i
 8003d4c:	b661      	cpsie	f
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	df00      	svc	0
 8003d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d5a:	bf00      	nop
 8003d5c:	e000ed08 	.word	0xe000ed08

08003d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d66:	4b46      	ldr	r3, [pc, #280]	; (8003e80 <xPortStartScheduler+0x120>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a46      	ldr	r2, [pc, #280]	; (8003e84 <xPortStartScheduler+0x124>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10a      	bne.n	8003d86 <xPortStartScheduler+0x26>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	613b      	str	r3, [r7, #16]
}
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d86:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <xPortStartScheduler+0x120>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a3f      	ldr	r2, [pc, #252]	; (8003e88 <xPortStartScheduler+0x128>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d10a      	bne.n	8003da6 <xPortStartScheduler+0x46>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	60fb      	str	r3, [r7, #12]
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003da6:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <xPortStartScheduler+0x12c>)
 8003da8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	22ff      	movs	r2, #255	; 0xff
 8003db6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <xPortStartScheduler+0x130>)
 8003dcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003dce:	4b31      	ldr	r3, [pc, #196]	; (8003e94 <xPortStartScheduler+0x134>)
 8003dd0:	2207      	movs	r2, #7
 8003dd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dd4:	e009      	b.n	8003dea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003dd6:	4b2f      	ldr	r3, [pc, #188]	; (8003e94 <xPortStartScheduler+0x134>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	4a2d      	ldr	r2, [pc, #180]	; (8003e94 <xPortStartScheduler+0x134>)
 8003dde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b80      	cmp	r3, #128	; 0x80
 8003df4:	d0ef      	beq.n	8003dd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003df6:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <xPortStartScheduler+0x134>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f1c3 0307 	rsb	r3, r3, #7
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d00a      	beq.n	8003e18 <xPortStartScheduler+0xb8>
	__asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	60bb      	str	r3, [r7, #8]
}
 8003e14:	bf00      	nop
 8003e16:	e7fe      	b.n	8003e16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e18:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <xPortStartScheduler+0x134>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <xPortStartScheduler+0x134>)
 8003e20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e22:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <xPortStartScheduler+0x134>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e2a:	4a1a      	ldr	r2, [pc, #104]	; (8003e94 <xPortStartScheduler+0x134>)
 8003e2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e36:	4b18      	ldr	r3, [pc, #96]	; (8003e98 <xPortStartScheduler+0x138>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <xPortStartScheduler+0x138>)
 8003e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <xPortStartScheduler+0x138>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <xPortStartScheduler+0x138>)
 8003e48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e4e:	f000 f8dd 	bl	800400c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e52:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <xPortStartScheduler+0x13c>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e58:	f000 f8fc 	bl	8004054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e5c:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <xPortStartScheduler+0x140>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0f      	ldr	r2, [pc, #60]	; (8003ea0 <xPortStartScheduler+0x140>)
 8003e62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e68:	f7ff ff66 	bl	8003d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e6c:	f7ff f88c 	bl	8002f88 <vTaskSwitchContext>
	prvTaskExitError();
 8003e70:	f7ff ff22 	bl	8003cb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	e000ed00 	.word	0xe000ed00
 8003e84:	410fc271 	.word	0x410fc271
 8003e88:	410fc270 	.word	0x410fc270
 8003e8c:	e000e400 	.word	0xe000e400
 8003e90:	2000016c 	.word	0x2000016c
 8003e94:	20000170 	.word	0x20000170
 8003e98:	e000ed20 	.word	0xe000ed20
 8003e9c:	2000000c 	.word	0x2000000c
 8003ea0:	e000ef34 	.word	0xe000ef34

08003ea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	607b      	str	r3, [r7, #4]
}
 8003ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <vPortEnterCritical+0x58>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	4a0d      	ldr	r2, [pc, #52]	; (8003efc <vPortEnterCritical+0x58>)
 8003ec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <vPortEnterCritical+0x58>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d10f      	bne.n	8003ef0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <vPortEnterCritical+0x5c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	603b      	str	r3, [r7, #0]
}
 8003eec:	bf00      	nop
 8003eee:	e7fe      	b.n	8003eee <vPortEnterCritical+0x4a>
	}
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	2000000c 	.word	0x2000000c
 8003f00:	e000ed04 	.word	0xe000ed04

08003f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <vPortExitCritical+0x50>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <vPortExitCritical+0x24>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	607b      	str	r3, [r7, #4]
}
 8003f24:	bf00      	nop
 8003f26:	e7fe      	b.n	8003f26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f28:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <vPortExitCritical+0x50>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	4a09      	ldr	r2, [pc, #36]	; (8003f54 <vPortExitCritical+0x50>)
 8003f30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <vPortExitCritical+0x50>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <vPortExitCritical+0x42>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f383 8811 	msr	BASEPRI, r3
}
 8003f44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	2000000c 	.word	0x2000000c
	...

08003f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f60:	f3ef 8009 	mrs	r0, PSP
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <pxCurrentTCBConst>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	f01e 0f10 	tst.w	lr, #16
 8003f70:	bf08      	it	eq
 8003f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7a:	6010      	str	r0, [r2, #0]
 8003f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f84:	f380 8811 	msr	BASEPRI, r0
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f7fe fffa 	bl	8002f88 <vTaskSwitchContext>
 8003f94:	f04f 0000 	mov.w	r0, #0
 8003f98:	f380 8811 	msr	BASEPRI, r0
 8003f9c:	bc09      	pop	{r0, r3}
 8003f9e:	6819      	ldr	r1, [r3, #0]
 8003fa0:	6808      	ldr	r0, [r1, #0]
 8003fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa6:	f01e 0f10 	tst.w	lr, #16
 8003faa:	bf08      	it	eq
 8003fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fb0:	f380 8809 	msr	PSP, r0
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	f3af 8000 	nop.w

08003fc0 <pxCurrentTCBConst>:
 8003fc0:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop

08003fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	607b      	str	r3, [r7, #4]
}
 8003fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003fe2:	f7fe ff19 	bl	8002e18 <xTaskIncrementTick>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fec:	4b06      	ldr	r3, [pc, #24]	; (8004008 <SysTick_Handler+0x40>)
 8003fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f383 8811 	msr	BASEPRI, r3
}
 8003ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <vPortSetupTimerInterrupt+0x34>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004016:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <vPortSetupTimerInterrupt+0x38>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <vPortSetupTimerInterrupt+0x3c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0a      	ldr	r2, [pc, #40]	; (800404c <vPortSetupTimerInterrupt+0x40>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	099b      	lsrs	r3, r3, #6
 8004028:	4a09      	ldr	r2, [pc, #36]	; (8004050 <vPortSetupTimerInterrupt+0x44>)
 800402a:	3b01      	subs	r3, #1
 800402c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800402e:	4b04      	ldr	r3, [pc, #16]	; (8004040 <vPortSetupTimerInterrupt+0x34>)
 8004030:	2207      	movs	r2, #7
 8004032:	601a      	str	r2, [r3, #0]
}
 8004034:	bf00      	nop
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	e000e010 	.word	0xe000e010
 8004044:	e000e018 	.word	0xe000e018
 8004048:	20000000 	.word	0x20000000
 800404c:	10624dd3 	.word	0x10624dd3
 8004050:	e000e014 	.word	0xe000e014

08004054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004064 <vPortEnableVFP+0x10>
 8004058:	6801      	ldr	r1, [r0, #0]
 800405a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800405e:	6001      	str	r1, [r0, #0]
 8004060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004062:	bf00      	nop
 8004064:	e000ed88 	.word	0xe000ed88

08004068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800406e:	f3ef 8305 	mrs	r3, IPSR
 8004072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b0f      	cmp	r3, #15
 8004078:	d914      	bls.n	80040a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800407a:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <vPortValidateInterruptPriority+0x70>)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <vPortValidateInterruptPriority+0x74>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	7afa      	ldrb	r2, [r7, #11]
 800408a:	429a      	cmp	r2, r3
 800408c:	d20a      	bcs.n	80040a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	607b      	str	r3, [r7, #4]
}
 80040a0:	bf00      	nop
 80040a2:	e7fe      	b.n	80040a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80040a4:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <vPortValidateInterruptPriority+0x78>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040ac:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <vPortValidateInterruptPriority+0x7c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d90a      	bls.n	80040ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	603b      	str	r3, [r7, #0]
}
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <vPortValidateInterruptPriority+0x60>
	}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	e000e3f0 	.word	0xe000e3f0
 80040dc:	2000016c 	.word	0x2000016c
 80040e0:	e000ed0c 	.word	0xe000ed0c
 80040e4:	20000170 	.word	0x20000170

080040e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040f4:	f7fe fdd6 	bl	8002ca4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040f8:	4b58      	ldr	r3, [pc, #352]	; (800425c <pvPortMalloc+0x174>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004100:	f000 f910 	bl	8004324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004104:	4b56      	ldr	r3, [pc, #344]	; (8004260 <pvPortMalloc+0x178>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	f040 808e 	bne.w	800422e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01d      	beq.n	8004154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004118:	2208      	movs	r2, #8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4413      	add	r3, r2
 800411e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	2b00      	cmp	r3, #0
 8004128:	d014      	beq.n	8004154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f023 0307 	bic.w	r3, r3, #7
 8004130:	3308      	adds	r3, #8
 8004132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <pvPortMalloc+0x6c>
	__asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	617b      	str	r3, [r7, #20]
}
 8004150:	bf00      	nop
 8004152:	e7fe      	b.n	8004152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d069      	beq.n	800422e <pvPortMalloc+0x146>
 800415a:	4b42      	ldr	r3, [pc, #264]	; (8004264 <pvPortMalloc+0x17c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d864      	bhi.n	800422e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004164:	4b40      	ldr	r3, [pc, #256]	; (8004268 <pvPortMalloc+0x180>)
 8004166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004168:	4b3f      	ldr	r3, [pc, #252]	; (8004268 <pvPortMalloc+0x180>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800416e:	e004      	b.n	800417a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	429a      	cmp	r2, r3
 8004182:	d903      	bls.n	800418c <pvPortMalloc+0xa4>
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f1      	bne.n	8004170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800418c:	4b33      	ldr	r3, [pc, #204]	; (800425c <pvPortMalloc+0x174>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004192:	429a      	cmp	r2, r3
 8004194:	d04b      	beq.n	800422e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2208      	movs	r2, #8
 800419c:	4413      	add	r3, r2
 800419e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	1ad2      	subs	r2, r2, r3
 80041b0:	2308      	movs	r3, #8
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d91f      	bls.n	80041f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <pvPortMalloc+0xf8>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	613b      	str	r3, [r7, #16]
}
 80041dc:	bf00      	nop
 80041de:	e7fe      	b.n	80041de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	1ad2      	subs	r2, r2, r3
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041f2:	69b8      	ldr	r0, [r7, #24]
 80041f4:	f000 f8f8 	bl	80043e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041f8:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <pvPortMalloc+0x17c>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	4a18      	ldr	r2, [pc, #96]	; (8004264 <pvPortMalloc+0x17c>)
 8004204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004206:	4b17      	ldr	r3, [pc, #92]	; (8004264 <pvPortMalloc+0x17c>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4b18      	ldr	r3, [pc, #96]	; (800426c <pvPortMalloc+0x184>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d203      	bcs.n	800421a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004212:	4b14      	ldr	r3, [pc, #80]	; (8004264 <pvPortMalloc+0x17c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a15      	ldr	r2, [pc, #84]	; (800426c <pvPortMalloc+0x184>)
 8004218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <pvPortMalloc+0x178>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	431a      	orrs	r2, r3
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800422e:	f7fe fd47 	bl	8002cc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <pvPortMalloc+0x16a>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	60fb      	str	r3, [r7, #12]
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <pvPortMalloc+0x168>
	return pvReturn;
 8004252:	69fb      	ldr	r3, [r7, #28]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3728      	adds	r7, #40	; 0x28
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20012d7c 	.word	0x20012d7c
 8004260:	20012d88 	.word	0x20012d88
 8004264:	20012d80 	.word	0x20012d80
 8004268:	20012d74 	.word	0x20012d74
 800426c:	20012d84 	.word	0x20012d84

08004270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d048      	beq.n	8004314 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004282:	2308      	movs	r3, #8
 8004284:	425b      	negs	r3, r3
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4413      	add	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	4b21      	ldr	r3, [pc, #132]	; (800431c <vPortFree+0xac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <vPortFree+0x44>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60fb      	str	r3, [r7, #12]
}
 80042b0:	bf00      	nop
 80042b2:	e7fe      	b.n	80042b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <vPortFree+0x62>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	60bb      	str	r3, [r7, #8]
}
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	4b11      	ldr	r3, [pc, #68]	; (800431c <vPortFree+0xac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4013      	ands	r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d019      	beq.n	8004314 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d115      	bne.n	8004314 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <vPortFree+0xac>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	401a      	ands	r2, r3
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042f8:	f7fe fcd4 	bl	8002ca4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <vPortFree+0xb0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4413      	add	r3, r2
 8004306:	4a06      	ldr	r2, [pc, #24]	; (8004320 <vPortFree+0xb0>)
 8004308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800430a:	6938      	ldr	r0, [r7, #16]
 800430c:	f000 f86c 	bl	80043e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004310:	f7fe fcd6 	bl	8002cc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004314:	bf00      	nop
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20012d88 	.word	0x20012d88
 8004320:	20012d80 	.word	0x20012d80

08004324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800432a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800432e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004330:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <prvHeapInit+0xac>)
 8004332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3307      	adds	r3, #7
 8004342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0307 	bic.w	r3, r3, #7
 800434a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	4a1f      	ldr	r2, [pc, #124]	; (80043d0 <prvHeapInit+0xac>)
 8004354:	4413      	add	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800435c:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <prvHeapInit+0xb0>)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004362:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <prvHeapInit+0xb0>)
 8004364:	2200      	movs	r2, #0
 8004366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004370:	2208      	movs	r2, #8
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <prvHeapInit+0xb4>)
 8004384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <prvHeapInit+0xb4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <prvHeapInit+0xb4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	1ad2      	subs	r2, r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <prvHeapInit+0xb4>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <prvHeapInit+0xb8>)
 80043b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <prvHeapInit+0xbc>)
 80043ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <prvHeapInit+0xc0>)
 80043be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043c2:	601a      	str	r2, [r3, #0]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	20000174 	.word	0x20000174
 80043d4:	20012d74 	.word	0x20012d74
 80043d8:	20012d7c 	.word	0x20012d7c
 80043dc:	20012d84 	.word	0x20012d84
 80043e0:	20012d80 	.word	0x20012d80
 80043e4:	20012d88 	.word	0x20012d88

080043e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043f0:	4b28      	ldr	r3, [pc, #160]	; (8004494 <prvInsertBlockIntoFreeList+0xac>)
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e002      	b.n	80043fc <prvInsertBlockIntoFreeList+0x14>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	d8f7      	bhi.n	80043f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	4413      	add	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	429a      	cmp	r2, r3
 8004416:	d108      	bne.n	800442a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	441a      	add	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	441a      	add	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d118      	bne.n	8004470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b15      	ldr	r3, [pc, #84]	; (8004498 <prvInsertBlockIntoFreeList+0xb0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d00d      	beq.n	8004466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	e008      	b.n	8004478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004466:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <prvInsertBlockIntoFreeList+0xb0>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e003      	b.n	8004478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	d002      	beq.n	8004486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20012d74 	.word	0x20012d74
 8004498:	20012d7c 	.word	0x20012d7c

0800449c <__libc_init_array>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	4d0d      	ldr	r5, [pc, #52]	; (80044d4 <__libc_init_array+0x38>)
 80044a0:	4c0d      	ldr	r4, [pc, #52]	; (80044d8 <__libc_init_array+0x3c>)
 80044a2:	1b64      	subs	r4, r4, r5
 80044a4:	10a4      	asrs	r4, r4, #2
 80044a6:	2600      	movs	r6, #0
 80044a8:	42a6      	cmp	r6, r4
 80044aa:	d109      	bne.n	80044c0 <__libc_init_array+0x24>
 80044ac:	4d0b      	ldr	r5, [pc, #44]	; (80044dc <__libc_init_array+0x40>)
 80044ae:	4c0c      	ldr	r4, [pc, #48]	; (80044e0 <__libc_init_array+0x44>)
 80044b0:	f000 f82e 	bl	8004510 <_init>
 80044b4:	1b64      	subs	r4, r4, r5
 80044b6:	10a4      	asrs	r4, r4, #2
 80044b8:	2600      	movs	r6, #0
 80044ba:	42a6      	cmp	r6, r4
 80044bc:	d105      	bne.n	80044ca <__libc_init_array+0x2e>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c4:	4798      	blx	r3
 80044c6:	3601      	adds	r6, #1
 80044c8:	e7ee      	b.n	80044a8 <__libc_init_array+0xc>
 80044ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ce:	4798      	blx	r3
 80044d0:	3601      	adds	r6, #1
 80044d2:	e7f2      	b.n	80044ba <__libc_init_array+0x1e>
 80044d4:	0800456c 	.word	0x0800456c
 80044d8:	0800456c 	.word	0x0800456c
 80044dc:	0800456c 	.word	0x0800456c
 80044e0:	08004570 	.word	0x08004570

080044e4 <memcpy>:
 80044e4:	440a      	add	r2, r1
 80044e6:	4291      	cmp	r1, r2
 80044e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80044ec:	d100      	bne.n	80044f0 <memcpy+0xc>
 80044ee:	4770      	bx	lr
 80044f0:	b510      	push	{r4, lr}
 80044f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044fa:	4291      	cmp	r1, r2
 80044fc:	d1f9      	bne.n	80044f2 <memcpy+0xe>
 80044fe:	bd10      	pop	{r4, pc}

08004500 <memset>:
 8004500:	4402      	add	r2, r0
 8004502:	4603      	mov	r3, r0
 8004504:	4293      	cmp	r3, r2
 8004506:	d100      	bne.n	800450a <memset+0xa>
 8004508:	4770      	bx	lr
 800450a:	f803 1b01 	strb.w	r1, [r3], #1
 800450e:	e7f9      	b.n	8004504 <memset+0x4>

08004510 <_init>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr

0800451c <_fini>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	bf00      	nop
 8004520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004522:	bc08      	pop	{r3}
 8004524:	469e      	mov	lr, r3
 8004526:	4770      	bx	lr
